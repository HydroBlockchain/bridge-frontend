{"version":3,"sources":["components/Menu/Menu.module.scss","assets/images/hydro-drop.png","components/Main/EthToBsc.tsx","common/variables.ts","assets/chains.ts","api/localAPI.ts","api/serverAPI.ts","redux/bridge-reducer.ts","components/Menu/NetworkElement/NetworkElement.tsx","components/Menu/Swapper/Swapper.tsx","components/Menu/Menu.tsx","components/Main/Main.tsx","assets/images/hydrobridge.svg","components/Navbar/Navbar.tsx","App.tsx","serviceWorker.js","redux/store.ts","index.tsx","components/Menu/NetworkElement/NetworkElement.module.scss","components/Menu/Swapper/Swapper.module.scss","components/Navbar/Navbar.module.scss"],"names":["module","exports","Modal","setAppElement","Component","networkIDs","networkNames","addressForWeb3","hydroAddresses","swapContractAddresses","eth2bsc","bsc2eth","coinexSmartChainTestnet","mumbaiTestnet","rinkebyTestnet","chainNamesForGetHydroBalance","eth","bsc","mumbaiTest","chains","polygon","chainId","Number","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","coinEx","rinkebyTest","coinExTest","Web3","require","web3","providers","HttpProvider","localAPI","getAccountAddress","a","getAccounts","accounts","getNetworkID","net","getId","connectToMetamask","returnValues","status","account","networkID","window","ethereum","enable","currentProvider","this","console","log","WebsocketProvider","error","changeNetwork","request","method","params","code","createHydroContractInstance","hydroAddress","Contract","BepHydro","getHydroBalance","hydroContractInstance","address","methods","balanceOf","call","HydroBalance","utils","fromWei","displayApprovedFund","hydroBalance","swapAddress","allowed","allowed_swap","approveFunds","swapContractAddress","approve","toWei","send","from","on","hash","exchangeTokenChain","approvedAmount","way","instance","axios","create","baseURL","withCredentials","serverApi","get","initialState","hydroBalanceRight","bepBalance","allowedHydro","allowedBep","loading","bepHydroAddress","ethToBscInstance","BscToEthInstance","bepHydroInstance","currentForm","swapInstance","totalSwapped","eth_allowed","blockNumber","notSelected","text","wrongNetwork","API_LINK","loading_text","txHash","gasFee","tx_Link","network_Explorer","prev_hash","swapping","setNetworkIDAC","type","payload","setLoadingAC","setAccountAC","setHydroContractInstanceAC","setHydroBalanceAC","setHydroBalanceRightAC","getHydroBalanceThunk","isAnotherAccount","dispatch","getState","bridge","then","data","tokenBalance","catch","e","response","errors","msg","options","value","label","elementColor","selectByArrowColor","selectStyles","control","base","backgroundColor","border","boxShadow","singleValue","color","menuList","option","isSelected","isFocused","NetworkElement","props","useDispatch","useEffect","isMain","state","className","s","networkElement","item","tempCircle","styles","onChange","setState","placeholder","find","isDisabled","components","IndicatorSeparator","Swapper","isDisable","swapper","swapperDisabled","onClick","icon","faArrowRightArrowLeft","Menu","useSelector","useState","inputValue","setInputValue","setButtonText","isSupportedNetwork","setIsSupportNetwork","stateLeft","setStateLeft","stateRight","setStateRight","isSelAndAmountBtnDisabled","setIsSelAndAmountBtnDisabled","isSwapperDisabled","setIsSwapperDisabled","undefined","swapWay","setSwapWay","menu","selectNetwork","tempStateValue","amount","headerAndBalance","amountHeader","amountBody","buttonIn","currentTarget","buttonsBlock","amountReceived","accent","disabled","bridgeState","Main","swapHydro","ethToBscSwap","networkId","parseFloat","toLocaleString","maximumFractionDigits","id","statusNetwork","Navbar","src","bridgeLogo","alt","networkStatus","slice","concat","width","height","Identicon","App","hydroInstance","componentDidMount","res","toast","href","target","swap","confirmationNumber","receipt","api","events","SwapDeposit","addBep","bscToEthSwap","requestOptions","headers","process","REACT_APP_API_KEY","body","JSON","stringify","fetch","json","hydroFee","gasfee","parse","values","transactionHash","tx_hash","setTimeout","getNetworkType","getBlockNumber","allEvents","filter","owner","fromBlock","toBlock","swapContract","BscToEthAbi","totalAmountSwapped","newTotalSwapped","getGasPrice","HydroAbi","EthToBscAbi","content","role","position","autoClose","hideProgressBar","newestOnTop","rtl","draggable","pauseOnHover","Boolean","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"k9XACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,eAAiB,6BAA6B,cAAgB,4BAA4B,OAAS,qBAAqB,iBAAmB,+BAA+B,aAAe,2BAA2B,WAAa,yBAAyB,SAAW,uBAAuB,aAAe,2BAA2B,OAAS,uB,wbCD5W,MAA0B,uC,OCIzCC,IAAMC,cAAc,SAEGC,Y,MCNXC,EAWAC,E,qFAXAD,O,6BAAAA,I,aAAAA,I,cAAAA,I,uBAAAA,I,oBAAAA,I,+BAAAA,I,6BAAAA,I,6BAAAA,M,cAWAC,K,mEAAAA,E,uBAAAA,E,kCAAAA,E,0BAAAA,E,oCAAAA,E,4BAAAA,E,mCAAAA,E,yCAAAA,M,KAYL,I,EAAMC,EAAiB,wBAGjBC,EACD,6CADCA,EAED,6CAFCA,EAGI,6CAEJC,EAAwB,CACjCC,QAAS,6CACTC,QAAS,6CACTC,wBAAyB,6CACzBC,cAAe,6CACfC,eAAgB,8CAEPC,GAA4B,mBACpCV,EAAWW,IAAM,YADmB,cAEpCX,EAAWY,IAAM,kBAFmB,cAGpCZ,EAAWa,WAAa,kBAHY,GCnC5BC,GAAW,mBACnBd,EAAWe,QAAU,CAClBC,QAAQ,KAAD,OAAOC,OAAOjB,EAAWe,SAASG,SAAS,KAClDC,UAAWlB,EAAac,QACxBK,eAAgB,CACZC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEdC,QAAS,CAAC,4BACVC,kBAAmB,CAAC,8BAVJ,cAYnBzB,EAAWY,IAAM,CACdI,QAAQ,KAAD,OAAOC,OAAOjB,EAAWY,KAAKM,SAAS,KAC9CC,UAAWlB,EAAaW,IACxBQ,eAAgB,CACZC,KAAM,6BACNC,OAAQ,MACRC,SAAU,IAEdC,QAAS,CACL,oCACA,oCACA,oCACA,oCACA,mCACA,mCACA,mCACA,mCACA,oCACA,oCACA,oCACA,oCACA,gCAEJC,kBAAmB,CAAC,yBAnCJ,cAqCnBzB,EAAWW,IAAM,CACdK,QAAQ,KAAD,OAAOC,OAAOjB,EAAWW,KAAKO,SAAS,OAtC9B,cAwCnBlB,EAAW0B,OAAS,CACjBV,QAAQ,KAAD,OAAOC,OAAOjB,EAAW0B,QAAQR,SAAS,KACjDC,UAAWlB,EAAayB,OACxBN,eAAgB,CACZC,KAAM,4BACNC,OAAQ,MACRC,SAAU,IAEdC,QAAS,CACL,0BAEJC,kBAAmB,CAAC,4BAnDJ,cAqDnBzB,EAAWa,WAAa,CACrBG,QAAQ,KAAD,OAAOC,OAAOjB,EAAWa,YAAYK,SAAS,KACrDC,UAAWlB,EAAaY,WACxBO,eAAgB,CACZC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEdC,QAAS,CAAC,IACVC,kBAAmB,CAAC,MA9DJ,cAgEnBzB,EAAW2B,YAAe,CACvBX,QAAQ,KAAD,OAAOC,OAAOjB,EAAW2B,aAAaT,SAAS,KACtDC,UAAWlB,EAAa0B,YACxBP,eAAgB,CACZC,KAAM,QACNC,OAAQ,MACRC,SAAU,IAEdC,QAAS,CAAC,IACVC,kBAAmB,CAAC,MAzEJ,cA2EnBzB,EAAW4B,WAAa,CACrBZ,QAAQ,KAAD,OAAOC,OAAOjB,EAAW4B,YAAYV,SAAS,KACrDC,UAAWlB,EAAa2B,WACxBR,eAAgB,CACZC,KAAM,iCACNC,OAAQ,OACRC,SAAU,IAEdC,QAAS,CACL,mCAEJC,kBAAmB,CAAC,gCAtFJ,G,QCIlBI,EAAOC,EAAQ,KAGjBC,EAAO,IAAIF,EAAK,IAAIA,EAAKG,UAAUC,aAAa/B,IAGvCgC,GAFA,IAAIL,EAAK,IAAIA,EAAKG,UAAUC,aAAa/B,IAE9B,CACpBiC,kBAAkB,WAAD,4BAAE,4BAAAC,EAAA,sEACQL,EAAKpB,IAAI0B,cADjB,cACTC,EADS,yBAERA,EAAS,IAFD,2CAAF,kDAAC,GAIlBC,aAAa,WAAD,4BAAE,sBAAAH,EAAA,sEACGL,EAAKpB,IAAI6B,IAAIC,QADhB,mFAAF,kDAAC,GAGbC,kBAAkB,WAAD,4BAAE,4BAAAN,EAAA,yDACXO,EAAe,CACfC,QAAQ,EACRC,QAAS,GACTC,UAAW,GAJA,SAOoB,qBAApBC,OAAOC,SAPP,gCAQDD,OAAOC,SAASC,SARf,OASPlB,EAAO,IAAIF,EAAKkB,OAAOC,UAThB,UAWS,qBAATjB,EAXA,wBAYPA,EAAO,IAAIF,EAAKE,EAAKmB,iBAZd,UAasBC,KAAKhB,oBAb3B,QAaPQ,EAAaE,QAbN,+BAePO,QAAQC,IAAI,oBACZtB,EAAO,IAAIF,EAAK,IAAIA,EAAKG,UAAUsB,kBAAkB,2DAhB9C,QAkBXX,EAAaC,QAAS,EAlBX,kDAoBXQ,QAAQG,MAAM,oCApBH,yBAuBgBxB,EAAKpB,IAAI6B,IAAIC,QAvB7B,eAuBfE,EAAaG,UAvBE,yBAwBRH,GAxBQ,0DAAF,kDAAC,GA2BlBa,cAAc,WAAD,4BAAE,WAAOV,GAAP,SAAAV,EAAA,+EAEDW,OAAOC,SAASS,QAAQ,CAC1BC,OAAQ,6BACRC,OAAQ,CAAC,CAAC3C,QAASF,EAAOgC,GAAW9B,YAJlC,yCAcQ,GAdR,4CAS+B,OAA9B,KAAqB4C,KATtB,kCAUOb,OAAOC,SAASS,QAAQ,CAC1BC,OAAQ,0BACRC,OAAQ,CAAC7C,EAAOgC,MAZrB,oFAiBI,GAjBJ,gEAAF,mDAAC,GAqBde,4BAA6B,SAACf,GAC1B,IAAIgB,EACJ,OAAQhB,GACJ,KAAK9C,EAAWW,IACZmD,EAAe3D,EACf,MAEJ,KAAKH,EAAWY,IACZkD,EAAe3D,EACf,MAEJ,KAAKH,EAAWa,WAChB,KAAKb,EAAW2B,YAChB,KAAK3B,EAAW4B,WACZkC,EAAe3D,EAIvB,OAAO,IAAI4B,EAAKpB,IAAIoD,SAASC,EAAuBF,IAExDG,gBAAgB,WAAD,4BAAE,WAAgBC,GAAhB,iBAAA9B,EAAA,sEAEGe,KAAKhB,oBAFR,cAEbgC,EAFa,yBAKkBD,EAAsBE,QAAQC,UAAUF,GAASG,OALnE,cAKHC,EALG,yBAMFxC,EAAKyC,MAAMC,QAAQF,IANjB,yCAQTnB,QAAQG,MAAM,yBARL,kBASF,IATE,0DAAF,mDAAC,GAahBmB,oBAAoB,WAAD,4BAAE,WAAgBR,EAAiCS,EAAsB9B,EAAiB+B,GAAxF,eAAAxC,EAAA,+EAEc8B,EAAsBE,QAAQS,QAAQhC,EAAS+B,GAAaN,OAF1E,OAEPQ,EAFO,OAGe/C,EAAKyC,MAAMC,QAAQK,EAAa5D,WAAY,SAH3D,gDAKbkC,QAAQG,MAAR,MALa,yDAAF,yDAAC,GAWpBwB,aAAa,WAAD,4BAAE,WAAgBb,EAAiCrB,EAAiBmC,GAAlE,SAAA5C,EAAA,sDACV8B,EAAsBE,QAAQa,QAAQD,EAAqBjD,EAAKyC,MAAMU,MAAM,eAAeC,KAAK,CAC5FC,KAAMvC,IAELwC,GAAG,mBAAmB,SAACC,GACP,OAATA,GAEAlC,QAAQC,IAAI,sBAPd,2CAAF,uDAAC,GAWbkC,mBAAmB,WAAD,4BAAE,WAAgBrB,EAAiCsB,EAAwBC,GAAzE,eAAArD,EAAA,sEACMe,KAAKhB,oBADX,OACVU,EADU,OAMhBqB,EAAsBE,QACjBa,QAAQ7E,EAAsBqF,GAAM1D,EAAKyC,MAAMU,MAAMM,IACrDL,KAAK,CAACC,KAAMvC,IACZwC,GAAG,mBAAmB,SAACC,GACP,OAATA,GAEAlC,QAAQC,IAAI,yBAZR,gDAAF,uDAAC,K,SCxHjBqC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,mCACTC,iBAAiB,IAGRC,EAAY,SAIL5B,EAAiBhD,GAC7B,OAAOuE,EAASM,IAAI,kBAAmB,CACnCrC,OAAQ,CACJQ,UAAShD,gBCPrB8E,EAAe,CACfpD,QAAS,GACT8B,aAAc,GACduB,kBAAmB,GACnBC,WAAY,IACZC,aAAc,IACdC,WAAY,IACZC,SAAS,EACTpC,sBAAuB,GACvBJ,aAAc,KACdyC,gBAAiB,KACjBC,iBAAkB,KAClBC,iBAAkB,GAClBC,iBAAkB,GAClBC,YAAa,GAEb/B,YAAa,GACbgC,aAAc,GACdC,aAAc,IACdhC,QAAS,IACTiC,YAAa,EACbC,YAAa,EACbjE,UAAW9C,EAAWgH,YACtBC,KAAM,GACNC,aAAc,GACdC,SAAU,GACVC,aAAc,GACdC,OAAQ,GACRC,OAAQ,EAERC,QAAS,GACTC,iBAAkB,GAClBC,UAAW,EACXC,UAAU,GAiBRC,EAAiB,SAAC7E,GAAD,MAAwB,CAAC8E,KAAM,wBAAyBC,QAAS,CAAC/E,eACnFgF,EAAe,SAACxB,GAAD,MAAuB,CAACsB,KAAM,qBAAsBC,QAAS,CAACvB,aAC7EyB,EAAe,SAAClF,GAAD,MAAsB,CAAC+E,KAAM,qBAAsBC,QAAS,CAAChF,aAC5EmF,EAA6B,SAAC9D,GAAD,MAAsC,CACrE0D,KAAM,qCACNC,QAAS,CAAC3D,2BAER+D,EAAoB,SAACtD,GAAD,MAA2B,CACjDiD,KAAM,2BACNC,QAAS,CAAClD,kBAERuD,EAAyB,SAAChC,GAAD,MAAgC,CAC3D0B,KAAM,iCACNC,QAAS,CAAC3B,uBAoCDiC,EAAuB,eAACC,EAAD,wDAAoCtF,EAApC,uDAA0E,EAA1E,8CAClB,WAAOuF,EAAUC,GAAjB,mBAAAlG,EAAA,yDACRS,EAAUyF,IAAWC,OAAO1F,SAC9BuF,GAAkC,IAAdtF,EAFV,0CAIAiD,EAA0BlD,EAASnC,EAA6BoC,IACjE0F,MAAK,SAAAC,GACFJ,EAASH,EAAuBO,EAAKA,KAAKC,kBAE7CC,OAAM,SAAAC,GACHxF,QAAQG,MAAM,kBAAmBqF,EAAEC,SAASJ,KAAKK,OAAO,GAAGC,KAC3DV,EAASH,EAAuB,SAVlC,uDAcN9E,QAAQG,MAAM,6BAAd,MACA8E,EAASH,EAAuB,MAf1B,uCAkBJhE,EAAwBhC,EAAS2B,4BAA4ByE,IAAWC,OAAOzF,WACrFuF,EAASL,EAA2B9D,IAnB1B,UAoBiBhC,EAAS+B,gBAAgBC,GApB1C,QAoBJS,EApBI,OAqBV0D,EAASJ,EAAkBtD,IArBjB,yDADkB,yDCrG9BqE,EAAU,CACZ,CAACC,MAAOjJ,EAAWa,WAAYqI,MAAOjJ,EAAaY,YACnD,CAACoI,MAAOjJ,EAAW2B,YAAauH,MAAOjJ,EAAa0B,aACpD,CAACsH,MAAOjJ,EAAW4B,WAAYsH,MAAOjJ,EAAa2B,YACnD,CAACqH,MAAOjJ,EAAWW,IAAKuI,MAAOjJ,EAAaU,KAC5C,CAACsI,MAAOjJ,EAAWY,IAAKsI,MAAOjJ,EAAaW,MAG1CuI,GAAe,UACfC,GAAqB,UAErBC,GAA6B,CAC/BC,QAAS,SAAAC,GAAI,kCACNA,GADM,IAETC,gBAAiBL,GACjBM,OAAQ,EACRC,UAAW,UAEfC,YAAa,SAAAJ,GAAI,kCACVA,GADU,IAEbK,MAAO,WAEXC,SAAU,SAAAN,GAAI,kCACPA,GADO,IAEVC,gBAAiBL,MAErBW,OAAQ,SAACP,EAAD,OAAQQ,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,UAApB,mBAAC,eACFT,GADC,IAEJC,gBAAiBO,GAAkCC,EAArBZ,GAAsDD,GACpF,SAAS,2BACFI,EAAK,WADZ,IAEIC,gBAAiB,gBAKhBS,GAAiB,SAACC,GAC3B,IAAM7B,EAAW8B,cACjBC,qBAAU,WDuDoB,IAACtH,ECrDvBoH,EAAMG,QAAUH,EAAMI,QAAUtK,EAAWgH,aAAaqB,GDqDjCvF,ECrD6DoH,EAAMI,MDqDpE,uCAAiC,WAAOjC,EAAUC,GAAjB,SAAAlG,EAAA,sEACrDF,EAASsB,cAAcV,GAD8B,wDAI3DM,QAAQG,MAAM,uBAJ6C,2CAAjC,4DCpD5B,CAAC2G,EAAMI,QAcT,OAAO,sBAAKC,UAAWC,IAAEC,eAAlB,UACH,+BAAOP,EAAMjD,OACb,sBAAKsD,UAAWC,IAAEE,KAAlB,UACI,qBAAKH,UAAWC,IAAEG,aAClB,cAAC,IAAD,CACI3B,QAASA,EACT4B,OAAQvB,GACRhI,KAAM,SACNwJ,SApBK,SAACf,GACdI,EAAMY,SAAUhB,EAAkBb,QAoB1B8B,YAAa,iBACb9B,MAjBJD,EACOA,EAAQgC,MAAK,SAAClB,GAAD,OAAYA,EAAOb,QAAUiB,EAAMI,SAEhD,EAeHW,WAAYf,EAAMe,WAClBC,WAAY,CACRC,mBAAoB,kBAAM,gB,wCCtEjCC,GAAU,SAAClB,GACpB,OACA,qBAAKK,UAAWL,EAAMmB,UAAN,UACPb,KAAEc,QADK,YACMd,KAAEe,iBAClBf,KAAEc,QAEHE,QAAS,WACAtB,EAAMmB,WAAWnB,EAAMsB,WALrC,SAOC,cAAC,KAAD,CAAiBC,KAAMC,UCEfC,GAAO,SAACzB,GACjB,IAAM7B,EAAW8B,cAEjB,EAAqDyB,aAAgD,SAAAtB,GAAK,OAAIA,EAAM/B,UAA7GzF,EAAP,EAAOA,UAAW6B,EAAlB,EAAkBA,aAAcuB,EAAhC,EAAgCA,kBAEhC,EAAoC2F,mBAAiB,IAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAAoC,kBAAxE,mBAAmBG,GAAnB,WACA,EAAkDH,oBAAS,GAA3D,mBAAOI,EAAP,KAA2BC,EAA3B,KACA,EAAkCL,mBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,EAAkET,oBAAS,GAA3E,mBAAOU,EAAP,KAAkCC,EAAlC,KACA,EAAkDX,oBAAS,GAA3D,mBAAOY,EAAP,KAA0BC,EAA1B,KACA,EAA8Bb,wBAAwCc,GAAtE,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAzC,qBAAU,WACNgC,EAAatJ,GACTA,IAAc9C,EAAWgH,aACzBgF,EAAc,QACdQ,GAA6B,KAG7BR,EAAc,kBACdQ,GAA6B,IAEjCH,IAAerM,EAAWgH,aAAemF,IAAcE,EACjDK,GAAqB,GACrBA,GAAqB,GAE1B5J,IAAc9C,EAAWgH,aAAelE,IAAc9C,EAAWW,KAAOmC,IAAc9C,EAAWY,KAC3FkC,IAAc9C,EAAWa,YAAciC,IAAc9C,EAAW2B,aAChEmB,IAAc9C,EAAW4B,WAC1BsK,GAAoB,GAAQA,GAAoB,GAGlDC,IAAcnM,EAAWW,KAAO0L,IAAerM,EAAWY,KAC1DwC,QAAQC,IAAI,WACZwJ,EAAW,YACJV,IAAcnM,EAAWY,KAAOyL,IAAerM,EAAWW,KACjEyC,QAAQC,IAAI,WACZwJ,EAAW,YACJR,IAAerM,EAAW4B,WACjCiL,EAAW,2BACJR,IAAerM,EAAWa,WACjCgM,EAAW,iBACJR,IAAerM,EAAW2B,YACjCkL,EAAW,kBAGVA,OAAWF,GAEG,IAAfN,IACAjJ,QAAQC,IAAI,sCACZgF,EAASF,GAAqB,EAAMkE,OAGzC,CAACvJ,EAAWqJ,EAAWE,IAE1BjC,qBAAU,WACF6B,GACA5D,EAASF,OAEd,CAACrF,IAkBJ,OACI,sBAAKyH,UAAS,UAAKL,EAAMK,UAAX,YAAwBC,IAAEsC,MAAxC,UACI,sBAAKvC,UAAWC,IAAEuC,cAAlB,UACI,cAAC,GAAD,CAAgB9F,KAAM,OAAQoD,QAAQ,EAAMC,MAAO6B,EAAWrB,SAAUsB,EACxDnB,WAAYsB,IAC5B,cAAC,GAAD,CAASlB,UAAWoB,EAAmBjB,QAX5B,WACnB,IAAMwB,EAAiBb,EACvBC,EAAaC,GACbC,EAAcU,MASN,cAAC,GAAD,CAAgB/F,KAAM,KAAMqD,MAAO+B,EAAYvB,SAAUwB,EACzCrB,WAAYsB,OAEhC,sBAAKhC,UAAWC,IAAEyC,OAAlB,UACI,qBAAK1C,UAAWC,IAAE0C,iBAAlB,SACI,sBAAK3C,UAAWC,IAAEyC,OAAlB,UACI,qBAAK1C,UAAWC,IAAE2C,aAAlB,oBAGA,sBAAK5C,UAAWC,IAAE4C,WAAlB,UACI,uDAA2C,KAAjBzI,EAAsB,IAAMA,KACtD,wDAAiD,KAAtBuB,EAA2B,IAAMA,aAKxE,sBAAKqE,UAAWC,IAAE6C,SAAlB,UACI,uBAAOzF,KAAK,OAAOmD,YAAa,eAAgB9B,MAAO6C,EAChDjB,SAAU,SAAAjC,GAAC,OAAImD,EAAcnD,EAAE0E,cAAcrE,UACpD,+CAIR,sBAAKsB,UAAWC,IAAE+C,aAAlB,UACI,kDACA,qBAAKhD,UAAWC,IAAEgD,eAAlB,SAAkD,KAAf1B,EAAoBA,EAAa,IACnEhJ,IAAc9C,EAAWgH,aACtB,wBAAQuD,UAAWC,IAAEiD,OACbjC,QAlDS,WAC7BnD,EHJ8B,uCAAgB,WAAOA,EAAUC,GAAjB,qBAAAlG,EAAA,sEAEPF,EAASQ,oBAFF,gBAE3CE,EAF2C,EAE3CA,OAAQC,EAFmC,EAEnCA,QAASC,EAF0B,EAE1BA,UACpBF,GACgB,KAAZC,GACAwF,EAASN,EAAalF,IAER,IAAdC,GAAiBuF,EAASV,EAAe7E,IAC7CuF,EAASP,GAAa,KAEtBO,EAASP,GAAa,IAI1B/E,OAAOC,SAASqC,GAAG,eAAnB,sBAAmC,8BAAAjD,EAAA,sEACTF,EAASC,oBADA,cACzBU,EADyB,OAE/BwF,EAASN,EAAalF,IAFS,SAIPX,EAASK,eAJF,OAIzBO,EAJyB,OAK/BuF,EAASV,EAAe7E,IALO,4CAde,2CAAhB,0DGsDV4K,UAAWzB,EAFnB,4BAIHnJ,IAAc9C,EAAWgH,aACtB,wBAAQwE,QAlDA,WHuDK,IAAChG,EAAwBC,OGtDlCkH,IAAZC,GACAvE,GHqDsB7C,EGrDKsG,EHqDmBrG,EGrDPmH,EHqDlB,uCAA8D,WAAOvE,EAAUC,GAAjB,iBAAAlG,EAAA,2DACvFnB,OAAOuE,GAAkB,GAD8D,uBAEjFmI,EAAcrF,IAAWC,OACzBrE,EAAwByJ,EAAYzJ,sBAErB,KADAyJ,EAAYhJ,cACRvB,QAAQG,MAAM,oBAAqB,uBAL2B,SAMjFrB,EAASqD,mBAAmBrB,EAAuBsB,EAAgBC,GANc,8BAUvFrC,QAAQG,MAAM,oBAAqB,8BAVoD,4CAA9D,2DGJLmK,cAAsBf,IAAZC,GAAyB3L,OAAO6K,IAAe,EADjE,yBC/EL8B,G,kDAhDX,WAAY1D,GAAmB,IAAD,8BAC1B,cAAMA,IACDI,MAAQ,CACT3D,YAAa,cAHS,E,0CAO9B,WAGyBxD,KAAK+G,MAAMtF,YACVzB,KAAK+G,MAAM9D,aACXjD,KAAK+G,MAAMnF,aACd5B,KAAK+G,MAAM2D,UACR1K,KAAK+G,MAAM4D,aAChB3K,KAAK+G,MAAMrF,QACN1B,KAAK+G,MAAM9C,aACnBjE,KAAK+G,MAAMjD,KACP9D,KAAK+G,MAAMxC,SACbvE,KAAK+G,MAAM5C,OACRnE,KAAK+G,MAAM6D,UAI9B,OACI,gCACI,qBAAKxD,UAAU,OAAf,SACI,qDACyB,IACpByD,WAAW7K,KAAK+G,MAAMrD,cAAcoH,oBAAetB,EAAW,CAC3DuB,sBAAuB,SAKnC,qBAAKC,GAAG,UAAU5D,UAAU,iBAA5B,SACI,qBAAKA,UAAU,YAAf,SACI,cAAC,GAAD,CAAMA,UAAW,mC,GAtCtBxK,a,8ECLJ,OAA0B,wC,oBCSnCqO,GAAgB,SAACtL,GACnB,OAAQA,GACJ,KAAK9C,EAAWgH,YACZ,OAAO/G,EAAa+G,YAExB,KAAKhH,EAAWW,IACZ,OAAOV,EAAaU,IACxB,KAAKX,EAAWY,IACZ,OAAOX,EAAaW,IACxB,KAAKZ,EAAWa,WACZ,OAAOZ,EAAaY,WACxB,KAAKb,EAAW2B,YACZ,OAAO1B,EAAa0B,YACxB,KAAK3B,EAAW4B,WACZ,OAAO3B,EAAa2B,WACxB,QACI,MAAO,uCAINyM,GAAS,WAClB,MAA6BzC,aAAgD,SAAAtB,GAAK,OAAIA,EAAM/B,UAArFzF,EAAP,EAAOA,UAAWD,EAAlB,EAAkBA,QAElB,OACI,sBAAK0H,UAAU,yDAAf,UACA,sBAAMA,UAAU,OAAhB,SACA,qBAAKA,UAAU,cAAc+D,IAAKC,GAAYC,IAAI,aAE9C,qBAAKjE,UAAyB,IAAdzH,EAAA,UACP0H,KAAEiE,cADK,YACYjE,KAAEiD,QACxBjD,KAAEiE,cAFR,SAEwBL,GAActL,KAEtC,oBAAIyH,UAAU,kBAAd,SACI,qBAAIA,UAAU,mDAAd,UACI,uBAAOA,UAAU,iBAAjB,SACI,uBAAO4D,GAAG,UAAV,SACKtL,EACI6L,MAAM,EAAG,GACTC,OAAO,OACPA,OAAO9L,EAAQ6L,MAAM,GAAI,SAIrC7L,EAAW,qBACR0H,UAAU,iBACVqE,MAAM,KACNC,OAAO,KACPP,IAAG,gCAA2B,IAAIQ,KAAUjM,EAAS,IAAI3B,YACzDsN,IAAI,KACD,8CC1CrBO,G,4MAEFzE,MAAQ,CACJzH,QAAS,GACT8B,aAAc,IACdwB,WAAY,IACZC,aAAc,IACdC,WAAY,IACZC,SAAS,EACT0I,cAAe,GACfjN,KAAM,GACN+B,aAAc,KACdyC,gBAAiB,KACjBC,iBAAkB,KAClBC,iBAAkB,GAClBC,iBAAkB,GAClBC,YAAa,GAEb/B,YAAa,GACbgC,aAAc,GACdC,aAAc,IACdhC,QAAS,IACTiC,YAAa,EACbC,YAAa,EACbjE,UAAW,EACXmE,KAAM,GACNC,aAAc,GACdC,SAAU,GACVC,aAAc,GACdC,OAAQ,GACRC,OAAQ,EAERC,QAAS,GACTC,iBAAkB,GAClBC,UAAW,EACXC,UAAU,G,EAGduH,kB,sBAAoB,sBAAA7M,EAAA,0F,EAuPpBsC,oB,sBAAsB,gCAAAtC,EAAA,sEACA,EAAKkI,MAAM0E,cAAc5K,QAAQC,UAAU,EAAKiG,MAAMzH,SAASyB,OAD/D,cACZ4K,EADY,OAEZvK,EAAe,EAAK2F,MAAMvI,KAAKyC,MAAMC,QAAQyK,EAAIhO,WAAY,SAFjD,SAIS,EAAKoJ,MAAM0E,cAAc5K,QAAQS,QAAQ,EAAKyF,MAAMzH,QAAS,EAAKyH,MAAM1F,aAAaN,OAJ9F,OAIZQ,EAJY,OAKlB,EAAKgG,SAAS,CAACjG,QAAS,EAAKyF,MAAMvI,KAAKyC,MAAMC,QAAQK,EAAa5D,WAAY,WAE/E,EAAK4J,SAAS,CAACnG,iBAPG,2C,EAYtBI,a,sBAAe,sBAAA3C,EAAA,6DACX,EAAK0I,SAAS,CAAC1D,aAAc,KADlB,SAEL,EAAKkD,MAAM0E,cAAc5K,QAAQa,QAAQ,EAAKqF,MAAM1F,YAAa,EAAK0F,MAAMvI,KAAKyC,MAAMU,MAAM,eAAeC,KAAK,CACnHC,KAAM,EAAKkF,MAAMzH,UAGhBwC,GAAG,mBAAmB,SAACC,GACP,OAATA,GACA6J,aAAM,mBAAGC,KAAM,EAAK9E,MAAM9C,iBAAmBlC,EAAM+J,OAAO,QAApD,mCARP,2C,EAafxB,U,uCAAY,WAAOZ,GAAP,SAAA7K,EAAA,6DACR,EAAK0I,SAAS,CACV1D,aAAc,wEACdM,UAAU,IAHN,SAMF,EAAK4C,MAAM1D,aAAaxC,QAAQkL,KAAK,EAAKhF,MAAMvI,KAAKyC,MAAMU,MAAM+H,EAAO/L,aAAaiE,KAAK,CAC5FC,KAAM,EAAKkF,MAAMzH,UAGhBwC,GAAG,mBAAmB,SAACC,GACP,OAATA,GACA6J,aAAM,mBAAGC,KAAM,EAAK9E,MAAM9C,iBAAmBlC,EAAM+J,OAAO,QAApD,mCAIbhK,GAAG,gBAAgB,SAACkK,EAA4BC,GAIlB,IAAvBD,GACA,EAAKzE,SAAS,CAAC1D,aAAc,8FAA8F,kBAAMhE,QAAQC,SAKlH,IAAvBkM,GAEA,EAAKzE,SAAS,CAACrD,UAAW,IAAI,kBAAM,EAAKgI,IAAID,EAAQE,OAAOC,mBAKnEtK,GAAG,SAAS,SAAC9B,EAAeiM,GACzB,EAAK1E,SAAS,CACV1D,aAAc,qBACdM,UAAU,IACX,kBAAMtE,QAAQC,YArCjB,2C,wDA0CZuM,O,uCAAS,WAAOzL,EAAiB8I,GAAxB,SAAA7K,EAAA,6DACLgB,QAAQC,IAAI4J,GACM,6CAFb,SAGC,EAAK3C,MAAM5D,iBAAiBtC,QAAQa,QADxB,6CAC6C,EAAKqF,MAAMvI,KAAKyC,MAAMU,MAAM+H,EAAO/L,aAAaiE,KAAK,CAChHC,KAAM,EAAKkF,MAAMzH,UAJhB,2C,0DAUTgN,a,uCAAe,WAAO5C,GAAP,SAAA7K,EAAA,6DACXgB,QAAQC,IAAI4J,GADD,SAEL,EAAK3C,MAAM7D,iBAAiBrC,QAAQkL,KAAK,EAAKhF,MAAMvI,KAAKyC,MAAMU,MAAM+H,EAAO/L,aAAaiE,KAAK,CAChGC,KAAM,EAAKkF,MAAMzH,UAHV,2C,uGA/Qf,WAAe,IAAD,OAENsB,EAAUhB,KAAKmH,MAAMzH,QAEzBO,QAAQC,IAAIF,KAAKmH,MAAMzH,SACvB,IAAMiN,EAAiB,CACnBpM,OAAQ,OACRqM,QAAS,CACL,eAAgB,mBAChB,cAAiBC,mJAAYC,kBAC7B,OAAU,KAGdC,KAAMC,KAAKC,UAAU,CACjBjM,QAASA,KAIjBkM,MAfa,wDAeCP,GACTtH,KADL,uCACU,WAAMK,GAAN,iBAAAzG,EAAA,yDACsB,MAApByG,EAASjG,OADX,gCAEuBiG,EAASyH,OAFhC,OAEMC,EAFN,OAGMC,EAASL,KAAKM,MAAMF,GACxB,EAAKzF,SAAS,CAACxD,OAAQkJ,EAAOvD,SAJhC,sBAOE7J,QAAQC,MAPV,2CADV,yD,iBAcJ,SAAIqN,GAAc,IAAD,OAITpL,EAAOoL,EAAOC,gBAGZb,EAAiB,CACnBpM,OAAQ,OACRqM,QAAS,CACL,eAAgB,mBAChB,cAAiBC,mJAAYC,kBAC7B,OAAU,KAGdC,KAAMC,KAAKC,UAAU,CACjB9K,KAAMA,KAIe,IAAzBnC,KAAKmH,MAAM7C,WACX4I,MAAMlN,KAAKmH,MAAMnD,SAAU2I,GACtBtH,KADL,uCACU,WAAMK,GAAN,eAAAzG,EAAA,yDACsB,MAApByG,EAASjG,OADX,iCAEwBiG,EAASyH,OAFjC,OAEQM,EAFR,OAGE,EAAK9F,SAAS,CAACzD,OAAQ8I,KAAKM,MAAMG,EAAQpB,WAAW,kBAAMpM,QAAQC,SACnE8L,aAAM,mBAAGC,KAAM,EAAK9E,MAAM/C,QAAU,EAAK+C,MAAMjD,OAAOsJ,gBAAiBtB,OAAO,QAAxE,4BAEN,EAAKvE,SAAS,CACV1D,aAAc,qCACdM,UAAU,EACVD,UAAW,IAEfrE,QAAQC,IAAIwF,GAXd,wBAaEzF,QAAQC,IAAI,4FACZwN,YAAW,kBAAM,EAAKpB,IAAIiB,KAAS,KAdrC,4CADV,yD,mEAwBR,WAAqB3O,GAArB,kCAAAK,EAAA,sEAEkCe,KAAKmH,MAAMvI,KAAKpB,IAAI6B,IAAIsO,iBAF1D,8BAG8B3N,KAAKmH,MAAMvI,KAAKpB,IAAIoQ,iBAHlD,qBAII5N,KAAK2H,SAAS,CACV7D,KAAM,mBACNE,SAAU,iDACVI,QAAS,2BACTC,iBAAkB,0BAClBlB,SAAS,IATjB,SAY2BnD,KAAKmH,MAAMvI,KAAKpB,IAAI0B,cAZ/C,cAYUC,EAZV,OAaUO,EAAUP,EAAS,GACzBa,KAAK2H,SAAS,CACVjI,YAGEiB,EAAe,6CACrBX,KAAK2H,SAAS,CACVhH,iBAGEkL,EAAgB,IAAIjN,EAAKpB,IAAIoD,SAASC,EAAuBF,GACnEX,KAAK2H,SAAS,CACVkE,kBAGJ7L,KAAKmH,MAAM0E,cAAcU,OAAOsB,UAAU,CACtCC,OAAQ,CAACC,MAAO/N,KAAKmH,MAAMzH,SAC3BsO,UAAW,SACXC,QAAS,WAER/L,GAAG,QAAQ,SAAChC,GACT,EAAKqB,yBAGP2M,EAAe,6CACfzK,EAAe,IAAI7E,EAAKpB,IAAIoD,SAASuN,GAA0BD,GAErElO,KAAK2H,SAAS,CACVlG,YAAayM,EACbzK,iBA1CR,UA6C+BzD,KAAKmH,MAAM1D,aAAaxC,QAAQmN,qBAAqBjN,OA7CpF,QA6CUuC,EA7CV,OA8CI1D,KAAK2H,SAAS,CAACjE,aAAc1D,KAAKmH,MAAMvI,KAAKyC,MAAMC,QAAQoC,EAAa3F,cAExEiC,KAAKmH,MAAM1D,aAAa8I,OAAOsB,UAAU,CAACI,QAAS,WAC9C/L,GAAG,OADR,uCACgB,WAAOhC,GAAP,eAAAjB,EAAA,sEACsB,EAAKkI,MAAM1D,aAAaxC,QAAQmN,qBAAqBjN,OAD3E,OACFkN,EADE,OAER,EAAK1G,SAAS,CAACjE,aAAc,EAAKyD,MAAMvI,KAAKyC,MAAMC,QAAQ+M,EAAgBtQ,cAFnE,2CADhB,kCAAAiC,KAAA,gBAOAA,KAAKuB,sBACLvB,KAAKsO,cAxDT,iD,0HA6DA,WAAqB1P,GAArB,kCAAAK,EAAA,sEAEkCe,KAAKmH,MAAMvI,KAAKpB,IAAI6B,IAAIsO,iBAF1D,8BAG8B3N,KAAKmH,MAAMvI,KAAKpB,IAAIoQ,iBAHlD,qBAII5N,KAAK2H,SAAS,CACV7D,KAAM,mBACNE,SAAU,iDACVI,QAAS,0BACTC,iBAAkB,2BAClBlB,SAAS,IATjB,SAY2BnD,KAAKmH,MAAMvI,KAAKpB,IAAI0B,cAZ/C,cAYUC,EAZV,OAaUO,EAAUP,EAAS,GACzBa,KAAK2H,SAAS,CACVjI,YAGEiB,EAAe,6CACrBX,KAAK2H,SAAS,CACVhH,iBAGEkL,EAAgB,IAAIjN,EAAKpB,IAAIoD,SAAS2N,GAAuB5N,GACnEX,KAAK2H,SAAS,CACVkE,kBAGJ7L,KAAKmH,MAAM0E,cAAcU,OAAOsB,UAAU,CAACC,OAAQ,CAACC,MAAO/N,KAAKmH,MAAMzH,SAAUuO,QAAS,WACpF/L,GAAG,QAAQ,SAAChC,GACT,EAAKqB,yBAGP2M,EAAe,6CACfzK,EAAe,IAAI7E,EAAKpB,IAAIoD,SAAS4N,GAA0BN,GAErElO,KAAK2H,SAAS,CACVlG,YAAayM,EACbzK,iBAtCR,UAyC+BzD,KAAKmH,MAAM1D,aAAaxC,QAAQmN,qBAAqBjN,OAzCpF,QAyCUuC,EAzCV,OA0CI1D,KAAK2H,SAAS,CAACjE,aAAc1D,KAAKmH,MAAMvI,KAAKyC,MAAMC,QAAQoC,EAAa3F,cAExEiC,KAAKmH,MAAM1D,aAAa8I,OAAOsB,UAAU,CAACI,QAAS,WAC9C/L,GAAG,OADR,uCACgB,WAAOhC,GAAP,eAAAjB,EAAA,sEACsB,EAAKkI,MAAM1D,aAAaxC,QAAQmN,qBAAqBjN,OAD3E,OACFkN,EADE,OAER,EAAK1G,SAAS,CAACjE,aAAc,EAAKyD,MAAMvI,KAAKyC,MAAMC,QAAQ+M,EAAgBtQ,cAFnE,2CADhB,kCAAAiC,KAAA,gBAOAA,KAAKuB,sBAnDT,iD,2EA+IA,WACI,IAAIkN,EA4BJ,OAzBQA,EAFJzO,KAAKmH,MAAMhE,QACkB,KAAzBnD,KAAKmH,MAAMxH,WAA6C,IAAzBK,KAAKmH,MAAMxH,UAChC,mBAAGqL,GAAG,SAAS5D,UAAU,cAAzB,wBAEA,mBAAG4D,GAAG,UAAU5D,UAAU,cAA1B,SAAyCpH,KAAKmH,MAAMpD,eAExD,cAAC,GAAD,CACNrC,QAAS1B,KAAKmH,MAAMzF,QACpBiC,YAAa3D,KAAKmH,MAAMxD,YACxBG,KAAM9D,KAAKmH,MAAMrD,KACjBb,aAAcjD,KAAKmH,MAAM3F,aACzBwB,WAAYhD,KAAKmH,MAAMnE,WACvBvB,YAAazB,KAAKmH,MAAM1F,YACxB8C,SAAUvE,KAAKmH,MAAM5C,SACrBb,aAAc1D,KAAKmH,MAAMzD,aACzBkH,UAAW5K,KAAKmH,MAAMxH,UACtBwE,OAAQnE,KAAKmH,MAAMhD,OAEnBvC,aAAc5B,KAAK4B,aACnB8I,UAAW1K,KAAK0K,UAChBgC,aAAc1M,KAAK0M,aAEnBD,OAAQzM,KAAKyM,OACbxI,aAAcjE,KAAKmH,MAAMlD,eAK7B,gCACI,cAAC,GAAD,IAEA,qBAAKmD,UAAU,uBAAf,SACI,qBAAKA,UAAU,WAAf,SACI,sBAAMsH,KAAK,OAAOtH,UAAU,4BAA5B,SACI,sBAAKA,UAAU,0BAAf,UACKqH,EAED,qBAAKzD,GAAG,UAAU5D,UAAU,iBAA5B,SACI,qBAAKA,UAAU,YAAf,SACI,cAAC,GAAD,CAAMA,UAAW,4BAIzB,cAAC,KAAD,CACIuH,SAAS,cACTC,WAAW,EACXC,iBAAiB,EACjBC,aAAa,EACbC,KAAK,EAELC,WAAS,EACTC,cAAY,oB,GAza9BrS,aAmbHgP,MCvbKsD,QACW,cAA7BtP,OAAOuP,SAASC,UAEe,UAA7BxP,OAAOuP,SAASC,UAEhBxP,OAAOuP,SAASC,SAASC,MACvB,2D,uBCdAC,GAAcC,aAAgB,CAChCnK,OTwCyB,WAAwE,IAAvE+B,EAAsE,uDAA9DrE,EAAc0M,EAAgD,uCAChG,OAAQA,EAAO/K,MACX,IAAK,wBACL,IAAK,qBACL,IAAK,qBACL,IAAK,2BACL,IAAK,iCACL,IAAK,qCACD,OAAO,2BAAI0C,GAAUqI,EAAO9K,SAEpC,OAAOyC,KS/CEsI,GAAQC,aAAYJ,GAAaK,aAAgBC,OAI9DhQ,OAAO6P,MAAQA,GCAPI,IAASC,OACb,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRO,SAASC,eAAe,SF+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/K,MAAK,SAAAgL,GACjCA,EAAaC,iB,4nNGlInB9T,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,KAAO,6BAA6B,WAAa,mCAAmC,OAAS,iC,mBCAvKD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAkB,mC,mBCAvED,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,OAAS,0B","file":"static/js/main.6da90988.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__-a3fI\",\"amountReceived\":\"Menu_amountReceived__4bwRc\",\"selectNetwork\":\"Menu_selectNetwork__2faIJ\",\"amount\":\"Menu_amount__208aE\",\"headerAndBalance\":\"Menu_headerAndBalance__1OJMl\",\"amountHeader\":\"Menu_amountHeader__2q_Y3\",\"amountBody\":\"Menu_amountBody__1tOmJ\",\"buttonIn\":\"Menu_buttonIn__3fXUE\",\"buttonsBlock\":\"Menu_buttonsBlock__2J6dJ\",\"accent\":\"Menu_accent__1wUei\"};","export default __webpack_public_path__ + \"static/media/hydro-drop.1d4559b5.png\";","import React, {ChangeEvent, Component, FormEvent, MouseEventHandler, MouseEvent} from 'react';\r\nimport Modal from 'react-modal';\r\nimport hydroDrop from '../../assets/images/hydro-drop.png';\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass EthToBsc extends Component<PropsType> {\r\n    state = {\r\n        output: '0',\r\n        modal: false,\r\n        addedFund: '0',\r\n        hydroAddress: \"0xa8377d8A0ee92120095bC7ae2d8A8E1973CcEa95\",\r\n        swapAmount: ''\r\n    }\r\n    // componentDidMount = async () => {\r\n    //     alert('Tip: You can switch between BSC Network and Ethereum Network through Metamask.')\r\n\r\n    // }\r\n\r\n    handleInputAmount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            addedFund: e.target.value\r\n        })\r\n    }\r\n\r\n    addFund = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        this.props.approveFunds(this.props.swapAddress, this.state.swapAmount);\r\n\r\n    }\r\n\r\n    handleSwapAmount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            swapAmount: e.target.value\r\n\r\n        })\r\n    }\r\n\r\n    swap = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        this.props.swapHydro(Number(this.state.swapAmount));\r\n    }\r\n\r\n    max = () => {\r\n        //<label className=\"max\" onClick={this.max}>MAX</label>\r\n        this.setState({swapAmount: this.props.allowed}, () => console.log(this.state.swapAmount, \"swap\")\r\n        )\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        this.setState({\r\n            modal: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let disable = this.props.swapping;\r\n        let calculated_Received = Number(this.state.output) - this.props.gasFee;\r\n        let approve_text = 'Approval Required Before Swapping';\r\n\r\n        if (Number(this.state.output) < this.props.gasFee) {\r\n            disable = true;\r\n            calculated_Received = 0;\r\n        }\r\n\r\n        if (Number(this.props.allowed) > 0) {\r\n            approve_text = 'Approved'\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"tx-interface\">\r\n\r\n                <form className=\"mb-3\" onSubmit={e => this.swap}>\r\n                    <h3>{this.props.text}</h3>\r\n                    <p className='success'>{this.props.loading_text}</p>\r\n                    <div>\r\n                        <label className=\"float-left\">Swap</label>\r\n                        <span className=\"float-right text-muted\">\r\n            Bal: {this.props.allowedHydro}\r\n          </span>\r\n                    </div>\r\n                    <div className=\"input-group mb-4\">\r\n                        <input\r\n                            type=\"number\"\r\n                            min=\"0\" max={this.props.allowedHydro} step=\"0.00000000000000001\"\r\n                            onChange={(event) => {\r\n                                const amount = event.target.value.toString()\r\n                                this.setState({\r\n                                    output: amount,\r\n                                    swapAmount: amount\r\n                                })\r\n\r\n                            }}\r\n                            // ref={(input) => {\r\n                            //     this.input = input\r\n                            // }}\r\n                            className=\"form-control form-control-lg\"\r\n                            placeholder=\"0\"\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <div className=\"input-group-text\">\r\n                                <img src={hydroDrop} height='25' alt=\"hydro-drop\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label className=\"gasfee\">Hydro Fee:{this.props.gasFee}</label>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"allowed\">\r\n\r\n                        <label className=\"float-right\">{approve_text}</label>\r\n                    </div>\r\n\r\n                    <div className=\"mt-5\">\r\n                        <label className=\"float-left\">You get</label>\r\n                    </div>\r\n                    <div className=\"input-group mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control form-control-lg\"\r\n                            placeholder=\"0\"\r\n                            value={calculated_Received}\r\n                            disabled\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <div className=\"input-group-text\">\r\n                                <img src={hydroDrop} height='25' alt=\"hydro-drop\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {Number(this.props.allowed) > 0 ? <button type=\"submit\" disabled={disable}\r\n                                                              className=\"btn btn-block btn-lg swap-btn\">Swap</button> :\r\n                        <button onClick={e => this.addFund(e)} className=\"btn btn-block btn-lg swap-btn\">Approve\r\n                            Tokens</button>}\r\n\r\n                </form>\r\n                <p className=\"footer\">Tip: You can switch between BSC Network and Ethereum Network through Metamask.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EthToBsc;\r\n\r\ntype PropsType = {\r\n    swapAddress: string\r\n    allowedHydro: string\r\n    approveFunds: (value1: string, value2: string) => void\r\n    swapHydro: (value: number) => void\r\n    allowed: string\r\n    loading_text: string\r\n    text: string\r\n    swapping: boolean\r\n    gasFee: number\r\n    networkId: number\r\n    ethToBscSwap?: () => void\r\n}","export enum networkIDs {\r\n    notSelected = 0,\r\n    eth = 1,\r\n    bsc = 56,\r\n    polygon = 137,\r\n    coinEx = 52,\r\n    mumbaiTest = 80001,\r\n    rinkebyTest = 4,\r\n    coinExTest = 53,\r\n}\r\n\r\nexport enum networkNames {\r\n    notSelected = 'Please click Connect Wallet and unlock you Metamask.',\r\n    eth = 'Ethereum Mainnet',\r\n    bsc = 'Binance Smart Chain Mainnet',\r\n    polygon = 'Polygon Mainnet',\r\n    coinEx = 'CoinEx Smart Chain Mainnet',\r\n    mumbaiTest = 'Mumbai Testnet',\r\n    rinkebyTest = 'Rinkeby Test Network',\r\n    coinExTest = 'CoinEx Smart Chain Testnet',\r\n}\r\n\r\n// export const addressForWeb3 = 'https://hydroblockchain.github.io/hydro-bridge-ui' // for github.io\r\nexport const addressForWeb3 = 'http://127.0.0.1:3000'\r\nexport const addressForWeb3_2 = 'https://mainnet.infura.io/v3/c68fe38b880c40fc9ef966d8d12452b0'\r\n\r\nexport const hydroAddresses = {\r\n    forEth: '0x946112efaB61C3636CBD52DE2E1392D7A75A6f01',\r\n    forBsc: '0xf3DBB49999B25c9D6641a9423C7ad84168D00071',\r\n    forTestNets: '0x9477B2d4442FCd35368c029a0016e6800437BAe2'\r\n}\r\nexport const swapContractAddresses = {\r\n    eth2bsc: '0xfa41d158Ea48265443799CF720a120BFE77e41ca',\r\n    bsc2eth: '0xa8377d8A0ee92120095bC7ae2d8A8E1973CcEa95',\r\n    coinexSmartChainTestnet: '0x57C48d9c0829D4244521d4E112eA539A3D391F1a',\r\n    mumbaiTestnet: '0x55656EEBCA47E834894de45408cBD4484c52518B',\r\n    rinkebyTestnet: '0xC62cfE5c4780b9f9d24209036BA0764B43C0F279',\r\n}\r\nexport const chainNamesForGetHydroBalance = {\r\n    [networkIDs.eth]: 'ethereum',\r\n    [networkIDs.bsc]: 'binanceMainnet',\r\n    [networkIDs.mumbaiTest]: 'polygonTestnet',\r\n}\r\nexport type RealizedNetworksType = networkIDs.eth | networkIDs.bsc | networkIDs.mumbaiTest","// todo: fix any\r\nimport {networkIDs, networkNames} from \"../common/variables\";\r\n\r\nexport const chains: any = {\r\n    [networkIDs.polygon]: {\r\n        chainId: `0x${Number(networkIDs.polygon).toString(16)}`,\r\n        chainName: networkNames.polygon,\r\n        nativeCurrency: {\r\n            name: \"MATIC\",\r\n            symbol: \"MATIC\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\"https://polygon-rpc.com/\"],\r\n        blockExplorerUrls: [\"https://polygonscan.com/\"]\r\n    },\r\n    [networkIDs.bsc]: {\r\n        chainId: `0x${Number(networkIDs.bsc).toString(16)}`,\r\n        chainName: networkNames.bsc,\r\n        nativeCurrency: {\r\n            name: \"Binance Chain Native Token\",\r\n            symbol: \"BNB\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\r\n            \"https://bsc-dataseed1.binance.org\",\r\n            \"https://bsc-dataseed2.binance.org\",\r\n            \"https://bsc-dataseed3.binance.org\",\r\n            \"https://bsc-dataseed4.binance.org\",\r\n            \"https://bsc-dataseed1.defibit.io\",\r\n            \"https://bsc-dataseed2.defibit.io\",\r\n            \"https://bsc-dataseed3.defibit.io\",\r\n            \"https://bsc-dataseed4.defibit.io\",\r\n            \"https://bsc-dataseed1.ninicoin.io\",\r\n            \"https://bsc-dataseed2.ninicoin.io\",\r\n            \"https://bsc-dataseed3.ninicoin.io\",\r\n            \"https://bsc-dataseed4.ninicoin.io\",\r\n            \"wss://bsc-ws-node.nariox.org\"\r\n        ],\r\n        blockExplorerUrls: [\"https://bscscan.com\"]\r\n    },\r\n    [networkIDs.eth]: {\r\n        chainId: `0x${Number(networkIDs.eth).toString(16)}`,\r\n    },\r\n    [networkIDs.coinEx]: {\r\n        chainId: `0x${Number(networkIDs.coinEx).toString(16)}`,\r\n        chainName: networkNames.coinEx,\r\n        nativeCurrency: {\r\n            name: \"CoinEx Chain Native Token\",\r\n            symbol: \"cet\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\r\n            \"https://rpc.coinex.net\"\r\n        ],\r\n        blockExplorerUrls: [\"https://www.coinex.net\"]\r\n    },\r\n    [networkIDs.mumbaiTest]: {  // for testing\r\n        chainId: `0x${Number(networkIDs.mumbaiTest).toString(16)}`,\r\n        chainName: networkNames.mumbaiTest,\r\n        nativeCurrency: {\r\n            name: \"MATIC\",\r\n            symbol: \"MATIC\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\"\"],\r\n        blockExplorerUrls: [\"\"]\r\n    },\r\n    [networkIDs.rinkebyTest] : { // for testing\r\n        chainId: `0x${Number(networkIDs.rinkebyTest).toString(16)}`,\r\n        chainName: networkNames.rinkebyTest,\r\n        nativeCurrency: {\r\n            name: \"Ether\",\r\n            symbol: \"ETH\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\"\"],\r\n        blockExplorerUrls: [\"\"]\r\n    },\r\n    [networkIDs.coinExTest]: {\r\n        chainId: `0x${Number(networkIDs.coinExTest).toString(16)}`,\r\n        chainName: networkNames.coinExTest,\r\n        nativeCurrency: {\r\n            name: 'CoinEx Chain Test Native Token',\r\n            symbol: \"cett\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\r\n            \"https://testnet-rpc.coinex.net/\"\r\n        ],\r\n        blockExplorerUrls: [\"https://testnet.coinex.net\"]\r\n    },\r\n};\r\n\r\ntype chainsType = {\r\n\r\n}\r\n\r\n// note: adding chains doesn't work for test nets","import {chains} from \"../assets/chains\";\r\nimport BepHydro from '../assets/abis/bephydro.json';\r\nimport {AbiItem} from \"web3-utils\";\r\nimport {addressForWeb3, hydroAddresses, networkIDs, swapContractAddresses} from \"../common/variables\";\r\nimport {Contract} from \"web3-eth-contract\";\r\n\r\n// let web3 = window.web3\r\nconst Web3 = require('web3');\r\n// const Web3_2 = require('web3');\r\n\r\nlet web3 = new Web3(new Web3.providers.HttpProvider(addressForWeb3))\r\nlet web3_2 = new Web3(new Web3.providers.HttpProvider(addressForWeb3));\r\n\r\nexport const localAPI = {\r\n    getAccountAddress: async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        return accounts[0]\r\n    },\r\n    getNetworkID: async () => {\r\n        return await web3.eth.net.getId();\r\n    },\r\n    connectToMetamask: async function () {\r\n        let returnValues = {\r\n            status: false,\r\n            account: '',\r\n            networkID: 0,\r\n        }\r\n        try {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                await window.ethereum.enable();\r\n                web3 = new Web3(window.ethereum); // Instance web3 with the provided information\r\n            }\r\n            if (typeof web3 !== 'undefined') {\r\n                web3 = new Web3(web3.currentProvider);\r\n                returnValues.account = await this.getAccountAddress()\r\n            } else {\r\n                console.log('No Web3 Detected')\r\n                web3 = new Web3(new Web3.providers.WebsocketProvider('wss://infura.io/ws/v3/72e114745bbf4822b987489c119f858b'));\r\n            }\r\n            returnValues.status = true\r\n        } catch (error) {\r\n            console.error('localAPI.connectToMetamask error')\r\n        }\r\n\r\n        returnValues.networkID = await web3.eth.net.getId()\r\n        return returnValues\r\n    },\r\n\r\n    changeNetwork: async (networkID: number) => {\r\n        try {\r\n            await window.ethereum.request({\r\n                method: \"wallet_switchEthereumChain\",\r\n                params: [{chainId: chains[networkID].chainId}],\r\n            })\r\n            return true\r\n        } catch (error) {\r\n            try {\r\n                if ((error as ErrorType).code === 4902) {\r\n                    await window.ethereum.request({\r\n                        method: \"wallet_addEthereumChain\",\r\n                        params: [chains[networkID]],\r\n                    });\r\n                    return true\r\n                }\r\n            } catch (error) {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    createHydroContractInstance: (networkID: number) => {\r\n        let hydroAddress\r\n        switch (networkID) {\r\n            case networkIDs.eth: {\r\n                hydroAddress = hydroAddresses.forEth\r\n                break\r\n            }\r\n            case networkIDs.bsc: {\r\n                hydroAddress = hydroAddresses.forBsc\r\n                break\r\n            }\r\n            case networkIDs.mumbaiTest:\r\n            case networkIDs.rinkebyTest:\r\n            case networkIDs.coinExTest: {\r\n                hydroAddress = hydroAddresses.forTestNets\r\n                break\r\n            }\r\n        }\r\n        return new web3.eth.Contract(BepHydro as AbiItem[], hydroAddress)\r\n    },\r\n    getHydroBalance: async function (hydroContractInstance: Contract) {\r\n        let address\r\n        address = await this.getAccountAddress()\r\n\r\n        try {\r\n            const HydroBalance = await hydroContractInstance.methods.balanceOf(address).call()\r\n            return web3.utils.fromWei(HydroBalance)\r\n        } catch (error) {\r\n            console.error('getHydroBalance error')\r\n            return ''\r\n        }\r\n    },\r\n    // this for total hydro swapped\r\n    displayApprovedFund: async function (hydroContractInstance: Contract, hydroBalance: string, account: string, swapAddress: string) {\r\n        try {\r\n            const allowed_swap = await hydroContractInstance.methods.allowed(account, swapAddress).call();\r\n            const allowed_swapFromWei = web3.utils.fromWei(allowed_swap.toString(), 'ether')\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        // console.log('displayApprovedFund, allowed_swap', allowed_swap)\r\n\r\n        // const allowed = web3.utils.fromWei(allowed_swap.toString(), 'ether');\r\n    },\r\n    approveFunds: async function (hydroContractInstance: Contract, account: string, swapContractAddress: string) {\r\n        hydroContractInstance.methods.approve(swapContractAddress, web3.utils.toWei('1000000000')).send({\r\n            from: account,\r\n        })\r\n            .on('transactionHash', (hash: string) => {\r\n                if (hash !== null) {\r\n                    // toast(<a href={this.state.network_Explorer + hash} target=\"blank\">View transaction.</a>);\r\n                    console.log('approveFunds on')\r\n                }\r\n            })\r\n    },\r\n    exchangeTokenChain: async function (hydroContractInstance: Contract, approvedAmount: string, way: ConversionWayType) {\r\n        const account = await this.getAccountAddress()\r\n\r\n        // const swapContractAddress = \"0xfa41d158Ea48265443799CF720a120BFE77e41ca\" // eth 2 bsc\r\n        // const swapContractAddress = \"0xa8377d8A0ee92120095bC7ae2d8A8E1973CcEa95\" // bsc 2 eth\r\n\r\n        hydroContractInstance.methods\r\n            .approve(swapContractAddresses[way], web3.utils.toWei(approvedAmount))\r\n            .send({from: account,})\r\n            .on('transactionHash', (hash: string) => {\r\n                if (hash !== null) {\r\n                    // toast(<a href={this.state.network_Explorer + hash} target=\"blank\">View transaction.</a>);\r\n                    console.log('on transactionHash')\r\n                }\r\n            })\r\n    },\r\n\r\n}\r\n\r\ndeclare let window: any // todo: maybe fix any\r\ntype ErrorType = {\r\n    code: number\r\n}\r\nexport type ConversionWayType = 'eth2bsc' | 'bsc2eth' | 'coinexSmartChainTestnet' | 'mumbaiTestnet' | 'rinkebyTestnet'\r\ntype AnotherProviderType = { isAnotherProvider: boolean }","import {toast} from \"react-toastify\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:3000/api/1.0.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const serverApi = {\r\n    getSwapCostInHydroTokens() {\r\n        return instance.get(`getSwapCostInHydroTokens?destinationChain=ethereum`)\r\n    },\r\n    getHydroBalance(address: string, chainName: string) {\r\n        return instance.get('getHydroBalance', {\r\n            params: {\r\n                address, chainName\r\n            }\r\n        })\r\n    }\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Contract} from \"web3-eth-contract\";\r\nimport {fromWei} from \"web3-utils\";\r\nimport {ConversionWayType, localAPI} from \"../api/localAPI\";\r\nimport {chainNamesForGetHydroBalance, networkIDs, RealizedNetworksType} from \"../common/variables\";\r\nimport App from \"../App\";\r\nimport {serverApi} from \"../api/serverAPI\";\r\n\r\nlet initialState = {\r\n    account: '',\r\n    hydroBalance: '',\r\n    hydroBalanceRight: '',\r\n    bepBalance: '0',\r\n    allowedHydro: '0',\r\n    allowedBep: '0',\r\n    loading: false,\r\n    hydroContractInstance: {} as Contract,\r\n    hydroAddress: null as string | null,\r\n    bepHydroAddress: null,\r\n    ethToBscInstance: null,\r\n    BscToEthInstance: {} as Contract,\r\n    bepHydroInstance: {} as Contract,\r\n    currentForm: '',\r\n\r\n    swapAddress: '',\r\n    swapInstance: {} as Contract,\r\n    totalSwapped: '0',\r\n    allowed: '0' as ReturnType<typeof fromWei>,\r\n    eth_allowed: 0,\r\n    blockNumber: 0,\r\n    networkID: networkIDs.notSelected,\r\n    text: '',\r\n    wrongNetwork: '',\r\n    API_LINK: '',\r\n    loading_text: '',\r\n    txHash: {} as { transactionHash: string },\r\n    gasFee: 0,\r\n    //proxyFee:0,\r\n    tx_Link: '',\r\n    network_Explorer: '',\r\n    prev_hash: 0,\r\n    swapping: false,\r\n}\r\n\r\nexport const bridgeReducer = (state = initialState, action: BridgeActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'BRIDGE/SET-NETWORK-ID':\r\n        case 'BRIDGE/SET-LOADING':\r\n        case \"BRIDGE/SET-ACCOUNT\":\r\n        case \"BRIDGE/SET-HYDRO-BALANCE\":\r\n        case 'BRIDGE/SET-HYDRO-BALANCE-RIGHT':\r\n        case \"BRIDGE/SET-HYDRO-CONTRACT-INSTANCE\":\r\n            return {...state, ...action.payload}\r\n    }\r\n    return state\r\n}\r\n\r\n//Action creators:\r\nconst setNetworkIDAC = (networkID: number) => ({type: 'BRIDGE/SET-NETWORK-ID', payload: {networkID}} as const)\r\nconst setLoadingAC = (loading: boolean) => ({type: 'BRIDGE/SET-LOADING', payload: {loading}} as const)\r\nconst setAccountAC = (account: string) => ({type: 'BRIDGE/SET-ACCOUNT', payload: {account}} as const)\r\nconst setHydroContractInstanceAC = (hydroContractInstance: Contract) => ({\r\n    type: 'BRIDGE/SET-HYDRO-CONTRACT-INSTANCE',\r\n    payload: {hydroContractInstance}\r\n} as const)\r\nconst setHydroBalanceAC = (hydroBalance: string) => ({\r\n    type: 'BRIDGE/SET-HYDRO-BALANCE',\r\n    payload: {hydroBalance}\r\n} as const)\r\nconst setHydroBalanceRightAC = (hydroBalanceRight: string) => ({\r\n    type: 'BRIDGE/SET-HYDRO-BALANCE-RIGHT',\r\n    payload: {hydroBalanceRight}\r\n} as const)\r\n\r\n//Thunks:\r\nexport const connectToMetamaskThunk = (): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    //todo: add here progress bar of app\r\n    const {status, account, networkID} = await localAPI.connectToMetamask()\r\n    if (status) {\r\n        if (account !== '') {\r\n            dispatch(setAccountAC(account))\r\n        }\r\n        if (networkID !== 0) dispatch(setNetworkIDAC(networkID))\r\n        dispatch(setLoadingAC(true))\r\n    } else {\r\n        dispatch(setLoadingAC(false))\r\n    }\r\n\r\n    //turn on monitoring if chain in metamask changed\r\n    window.ethereum.on('chainChanged', async function () {\r\n        const account = await localAPI.getAccountAddress()\r\n        dispatch(setAccountAC(account))\r\n\r\n        const networkID = await localAPI.getNetworkID()\r\n        dispatch(setNetworkIDAC(networkID))\r\n    })\r\n\r\n}\r\n\r\nexport const changeNetworkThunk = (networkID: number): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    if (await localAPI.changeNetwork(networkID)) {\r\n        //todo: here will be status of app with progress bar\r\n    } else {\r\n        console.error('changeNetwork error')\r\n    }\r\n}\r\n\r\nexport const getHydroBalanceThunk = (isAnotherAccount: boolean = false, networkID: RealizedNetworksType | 0 = 0)\r\n    : AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    const account = getState().bridge.account\r\n    if (isAnotherAccount && networkID !== 0) {\r\n        try {\r\n            await serverApi.getHydroBalance(account, chainNamesForGetHydroBalance[networkID])\r\n                .then(data => {\r\n                    dispatch(setHydroBalanceRightAC(data.data.tokenBalance))\r\n                })\r\n                .catch(e => {\r\n                    console.error('serverApi error', e.response.data.errors[0].msg)\r\n                    dispatch(setHydroBalanceRightAC('?'))\r\n                })\r\n\r\n        } catch (e) {\r\n            console.error('getHydroBalanceThunk error', e)\r\n            dispatch(setHydroBalanceRightAC('?'))\r\n        }\r\n    } else {\r\n        const hydroContractInstance = localAPI.createHydroContractInstance(getState().bridge.networkID)\r\n        dispatch(setHydroContractInstanceAC(hydroContractInstance))\r\n        const hydroBalance = await localAPI.getHydroBalance(hydroContractInstance)\r\n        dispatch(setHydroBalanceAC(hydroBalance))\r\n    }\r\n}\r\n\r\nexport const getHydroBalanceForInactiveAccountThunk = (): AppThunk => async () => {\r\n\r\n}\r\n\r\nexport const approveFundsThunk = (approvedAmount: string, way: ConversionWayType): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    if (Number(approvedAmount) > 0) {\r\n        const bridgeState = getState().bridge\r\n        const hydroContractInstance = bridgeState.hydroContractInstance\r\n        const hydraBalance = bridgeState.hydroBalance\r\n        if (hydraBalance === '') console.error('approveFundsThunk', 'HydroBalance === \"\"')\r\n        await localAPI.exchangeTokenChain(hydroContractInstance, approvedAmount, way)\r\n        // await serverApi.getSwapCostInHydroTokens()\r\n\r\n    } else {\r\n        console.error('approveFundsThunk', 'approvedAmount must be > 0')\r\n    }\r\n\r\n}\r\n\r\nexport const getSwapCostInHydroTokensThunk = (): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    await serverApi.getSwapCostInHydroTokens()\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type BridgeActionTypes =\r\n    | ReturnType<typeof setNetworkIDAC>\r\n    | ReturnType<typeof setLoadingAC>\r\n    | ReturnType<typeof setAccountAC>\r\n    | ReturnType<typeof setHydroContractInstanceAC>\r\n    | ReturnType<typeof setHydroBalanceAC>\r\n    | ReturnType<typeof setHydroBalanceRightAC>\r\n\r\ntype AppThunk = ThunkAction<void, AppRootStateType, unknown, BridgeActionTypes>\r\n\r\ndeclare let window: any; // todo: maybe fix any","import React, {useEffect} from \"react\";\r\nimport s from \"./NetworkElement.module.scss\";\r\nimport Select, {PropsValue, StylesConfig} from \"react-select\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeNetworkThunk} from \"../../../redux/bridge-reducer\";\r\nimport {networkIDs, networkNames} from \"../../../common/variables\";\r\n\r\nconst options = [\r\n    {value: networkIDs.mumbaiTest, label: networkNames.mumbaiTest},\r\n    {value: networkIDs.rinkebyTest, label: networkNames.rinkebyTest},\r\n    {value: networkIDs.coinExTest, label: networkNames.coinExTest},\r\n    {value: networkIDs.eth, label: networkNames.eth},\r\n    {value: networkIDs.bsc, label: networkNames.bsc},\r\n]\r\n\r\nconst elementColor = '#313647'\r\nconst selectByArrowColor = '#203147'\r\n\r\nconst selectStyles: StylesConfig = {\r\n    control: base => ({\r\n        ...base,\r\n        backgroundColor: elementColor,\r\n        border: 0,\r\n        boxShadow: 'none'\r\n    }),\r\n    singleValue: base => ({\r\n        ...base,\r\n        color: 'white'\r\n    }),\r\n    menuList: base => ({\r\n        ...base,\r\n        backgroundColor: elementColor,\r\n    }),\r\n    option: (base, {isSelected, isFocused}) => ({\r\n        ...base,\r\n        backgroundColor: isSelected ? selectByArrowColor : isFocused ? selectByArrowColor : elementColor,\r\n        \":hover\": {\r\n            ...base[':hover'],\r\n            backgroundColor: '#4E5260'\r\n        },\r\n    }),\r\n}\r\n\r\nexport const NetworkElement = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        //change network in Metamask\r\n        if (props.isMain && props.state !== networkIDs.notSelected) dispatch(changeNetworkThunk(props.state))\r\n    },[props.state])\r\n\r\n    const onChange = (option: PropsValue<Option | Option[]>) => {\r\n        props.setState((option as Option).value);\r\n    }\r\n\r\n    const getValue = () => {\r\n        if (options) {\r\n            return options.find((option) => option.value === props.state);\r\n        } else {\r\n            return 0 as any // todo: fix any\r\n        }\r\n    };\r\n\r\n    return <div className={s.networkElement}>\r\n        <span>{props.text}</span>\r\n        <div className={s.item}>\r\n            <div className={s.tempCircle}/>\r\n            <Select\r\n                options={options}\r\n                styles={selectStyles}\r\n                name={\"select\"}\r\n                onChange={onChange}\r\n                placeholder={\"Select Network\"}\r\n                value={getValue()}\r\n                isDisabled={props.isDisabled}\r\n                components={{\r\n                    IndicatorSeparator: () => null\r\n                }}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype Option = {\r\n    label: string;\r\n    value: number;\r\n}\r\ntype PropsType = {\r\n    text: string\r\n    isMain?: boolean\r\n    state: number\r\n    setState: (value: number) => void\r\n    isDisabled: boolean\r\n}\r\n","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowRightArrowLeft} from \"@fortawesome/free-solid-svg-icons\";\r\nimport s from './Swapper.module.scss'\r\n\r\nexport const Swapper = (props: PropsType) => {\r\n    return (\r\n    <div className={props.isDisable\r\n        ? `${s.swapper} ${s.swapperDisabled}`\r\n        : s.swapper\r\n    }\r\n         onClick={() => {\r\n             if (!props.isDisable) props.onClick()\r\n         }}\r\n    ><FontAwesomeIcon icon={faArrowRightArrowLeft}/>\r\n    </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    isDisable: boolean\r\n    onClick: () => void\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport s from './Menu.module.scss'\r\nimport {NetworkElement} from \"./NetworkElement/NetworkElement\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    approveFundsThunk,\r\n    connectToMetamaskThunk,\r\n    getHydroBalanceThunk,\r\n    InitialStateType\r\n} from \"../../redux/bridge-reducer\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Swapper} from \"./Swapper/Swapper\";\r\nimport {networkIDs} from \"../../common/variables\";\r\nimport {ConversionWayType} from \"../../api/localAPI\";\r\n\r\n\r\nexport const Menu = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {networkID, hydroBalance, hydroBalanceRight} = useSelector<AppRootStateType, InitialStateType>(state => state.bridge)\r\n\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [buttonText, setButtonText] = useState<'Connect Wallet' | 'Swap'>('Connect Wallet')\r\n    const [isSupportedNetwork, setIsSupportNetwork] = useState(false)\r\n    const [stateLeft, setStateLeft] = useState(0)\r\n    const [stateRight, setStateRight] = useState(0)\r\n    const [isSelAndAmountBtnDisabled, setIsSelAndAmountBtnDisabled] = useState(true)\r\n    const [isSwapperDisabled, setIsSwapperDisabled] = useState(true)\r\n    const [swapWay, setSwapWay] = useState<undefined | ConversionWayType>(undefined)\r\n\r\n    useEffect(() => {\r\n        setStateLeft(networkID)\r\n        if (networkID !== networkIDs.notSelected) {\r\n            setButtonText('Swap')\r\n            setIsSelAndAmountBtnDisabled(false)\r\n\r\n        } else {\r\n            setButtonText('Connect Wallet')\r\n            setIsSelAndAmountBtnDisabled(true)\r\n        }\r\n        stateRight === networkIDs.notSelected || stateLeft === stateRight\r\n            ? setIsSwapperDisabled(true)\r\n            : setIsSwapperDisabled(false);\r\n\r\n        (networkID === networkIDs.notSelected || networkID === networkIDs.eth || networkID === networkIDs.bsc\r\n            || networkID === networkIDs.mumbaiTest || networkID === networkIDs.rinkebyTest\r\n            || networkID === networkIDs.coinExTest)\r\n            ? setIsSupportNetwork(true) : setIsSupportNetwork(false)\r\n\r\n        // for swap conversion way\r\n        if (stateLeft === networkIDs.eth && stateRight === networkIDs.bsc) {\r\n            console.log('eth2bsc')\r\n            setSwapWay('eth2bsc')\r\n        } else if (stateLeft === networkIDs.bsc && stateRight === networkIDs.eth) {\r\n            console.log('bsc2eth')\r\n            setSwapWay('bsc2eth')\r\n        } else if (stateRight === networkIDs.coinExTest) {\r\n            setSwapWay('coinexSmartChainTestnet')\r\n        } else if (stateRight === networkIDs.mumbaiTest) {\r\n            setSwapWay('mumbaiTestnet')\r\n        } else if (stateRight === networkIDs.rinkebyTest) {\r\n            setSwapWay('rinkebyTestnet')\r\n        }\r\n\r\n        else setSwapWay(undefined)\r\n\r\n        if (stateRight !== 0) { // CORS errors\r\n            console.log('Menu:start position of right state')\r\n            dispatch(getHydroBalanceThunk(true, stateRight))\r\n\r\n        }\r\n    }, [networkID, stateLeft, stateRight])\r\n\r\n    useEffect(() => {\r\n        if (isSupportedNetwork) {\r\n            dispatch(getHydroBalanceThunk())\r\n        }\r\n    }, [networkID])\r\n\r\n    const connectToMetamaskHandler = () => {\r\n        dispatch(connectToMetamaskThunk())\r\n    }\r\n\r\n    const exchangeHandler = () => {\r\n        if (swapWay !== undefined) {\r\n            dispatch(approveFundsThunk(inputValue, swapWay))\r\n        }\r\n    }\r\n\r\n    const onClickSwapper = () => {\r\n        const tempStateValue = stateLeft\r\n        setStateLeft(stateRight)\r\n        setStateRight(tempStateValue)\r\n    }\r\n\r\n    return (\r\n        <div className={`${props.className} ${s.menu}`}>\r\n            <div className={s.selectNetwork}>\r\n                <NetworkElement text={'From'} isMain={true} state={stateLeft} setState={setStateLeft}\r\n                                isDisabled={isSelAndAmountBtnDisabled}/>\r\n                <Swapper isDisable={isSwapperDisabled} onClick={onClickSwapper}/>\r\n                <NetworkElement text={'To'} state={stateRight} setState={setStateRight}\r\n                                isDisabled={isSelAndAmountBtnDisabled}/>\r\n            </div>\r\n            <div className={s.amount}>\r\n                <div className={s.headerAndBalance}>\r\n                    <div className={s.amount}>\r\n                        <div className={s.amountHeader}>\r\n                            Amount\r\n                        </div>\r\n                        <div className={s.amountBody}>\r\n                            <div>Left HYDRO Balance: {hydroBalance === '' ? '?' : hydroBalance}</div>\r\n                            <div>Right HYDRO Balance: {hydroBalanceRight === '' ? '?' : hydroBalanceRight}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={s.buttonIn}>\r\n                    <input type=\"text\" placeholder={'Enter amount'} value={inputValue}\r\n                           onChange={e => setInputValue(e.currentTarget.value)}/>\r\n                    <button>MAX</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.buttonsBlock}>\r\n                <div>Amount Received</div>\r\n                <div className={s.amountReceived}>{inputValue !== '' ? inputValue : 0}</div>\r\n                {networkID === networkIDs.notSelected &&\r\n                    <button className={s.accent}\r\n                            onClick={connectToMetamaskHandler}\r\n                            disabled={!isSupportedNetwork}\r\n                    >Connect Wallet</button>}\r\n                {networkID !== networkIDs.notSelected &&\r\n                    <button onClick={exchangeHandler}\r\n                            disabled={swapWay === undefined || Number(inputValue) <= 0}\r\n                    >Swap</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    className: string\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport EthToBsc from \"./EthToBsc\";\r\nimport BscToEth from \"../BscToEth\";\r\nimport {Menu} from \"../Menu/Menu\";\r\n\r\nclass Main extends Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            currentForm: \"eth to bsc\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let content = (\r\n            <EthToBsc\r\n                swapAddress={this.props.swapAddress}\r\n                allowedHydro={this.props.allowedHydro}\r\n                approveFunds={this.props.approveFunds}\r\n                swapHydro={this.props.swapHydro}\r\n                ethToBscSwap={this.props.ethToBscSwap}\r\n                allowed={this.props.allowed}\r\n                loading_text={this.props.loading_text}\r\n                text={this.props.text}\r\n                swapping={this.props.swapping}\r\n                gasFee={this.props.gasFee}\r\n                networkId={this.props.networkId}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"head\">\r\n                    <p>\r\n                        Total Hydro Swapped:{\" \"}\r\n                        {parseFloat(this.props.totalSwapped).toLocaleString(undefined, {\r\n                            maximumFractionDigits: 2,\r\n                        })}\r\n                    </p>\r\n                </div>\r\n\r\n                <div id=\"content\" className=\"mt-5 swap-form\">\r\n                    <div className=\"card mb-4\">\r\n                        <Menu className={'card-body main-form'}/>\r\n                    </div>\r\n                   {/* <div className=\"card mb-4\">\r\n                        <div className=\"card-body main-form\">{content}</div>\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\ntype PropsType = {\r\n    swapAddress: string\r\n    allowedHydro: string\r\n    approveFunds: () => void\r\n    swapHydro: (amount: number) => Promise<void>\r\n    allowed: string\r\n    loading_text: string\r\n    text: string\r\n    swapping: boolean\r\n    gasFee: number\r\n    networkId: number\r\n    totalSwapped: string\r\n    eth_allowed: number\r\n    bepBalance: string\r\n    bscToEthSwap: (amount: string) => Promise<void>\r\n    addBep: (address: string, amount: string) => Promise<void>\r\n    ethToBscSwap?: () => void\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hydrobridge.32f9f1a5.svg\";","import React from \"react\";\r\nimport Identicon from \"identicon.js\";\r\nimport bridgeLogo from '../../assets/images/hydrobridge.svg';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {InitialStateType} from \"../../redux/bridge-reducer\";\r\nimport s from './Navbar.module.scss'\r\nimport {networkIDs, networkNames} from \"../../common/variables\";\r\n\r\nconst statusNetwork = (networkID: number) => {\r\n    switch (networkID) {\r\n        case networkIDs.notSelected: {\r\n            return networkNames.notSelected\r\n        }\r\n        case networkIDs.eth:\r\n            return networkNames.eth\r\n        case networkIDs.bsc:\r\n            return networkNames.bsc\r\n        case networkIDs.mumbaiTest:\r\n            return networkNames.mumbaiTest\r\n        case networkIDs.rinkebyTest:\r\n            return networkNames.rinkebyTest\r\n        case networkIDs.coinExTest:\r\n            return networkNames.coinExTest\r\n        default:\r\n            return 'This network is not supported yet.'\r\n    }\r\n}\r\n\r\nexport const Navbar = () => {\r\n    const {networkID, account} = useSelector<AppRootStateType, InitialStateType>(state => state.bridge)\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-dark fixed-top flex-md-nowrap p-0 shadow\">\r\n        <span className=\"ml-2\">\r\n        <img className='bridge-logo' src={bridgeLogo} alt='bridge'/>\r\n        </span>\r\n            <div className={networkID === 0\r\n                ? `${s.networkStatus} ${s.accent}`\r\n                : s.networkStatus}>{statusNetwork(networkID)}</div>\r\n\r\n            <ul className=\"navbar-nav px-3\">\r\n                <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n                    <small className=\"text-secondary\">\r\n                        <small id=\"account\">\r\n                            {account\r\n                                .slice(0, 5)\r\n                                .concat(\"...\")\r\n                                .concat(account.slice(37, 42))}\r\n                        </small>\r\n                    </small>\r\n\r\n                    {account ? (<img\r\n                        className=\"identicon ml-2\"\r\n                        width=\"20\"\r\n                        height=\"20\"\r\n                        src={`data:image/png;base64,${new Identicon(account, 30).toString()}`}\r\n                        alt=\"\"\r\n                    />) : (<span> </span>)}\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport Main from './components/Main/Main';\r\nimport HydroAbi from './assets/abis/hydro.json';\r\nimport EthToBscAbi from './assets/abis/ethToBsc.json';\r\nimport BscToEthAbi from './assets/abis/bscToEth.json';\r\nimport BepHydro from './assets/abis/bephydro.json';\r\nimport './App.scss'\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {Contract} from 'web3-eth-contract';\r\nimport {AbiItem, fromWei} from 'web3-utils'\r\nimport {Menu} from \"./components/Menu/Menu\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport Web3 from \"web3\";\r\n// import '../public/web3.min.js'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        account: '',\r\n        hydroBalance: '0',\r\n        bepBalance: '0',\r\n        allowedHydro: '0',\r\n        allowedBep: '0',\r\n        loading: true,\r\n        hydroInstance: {} as Contract,\r\n        web3: {} as Web3,\r\n        hydroAddress: null as string | null,\r\n        bepHydroAddress: null,\r\n        ethToBscInstance: null,\r\n        BscToEthInstance: {} as Contract,\r\n        bepHydroInstance: {} as Contract,\r\n        currentForm: '',\r\n\r\n        swapAddress: '',\r\n        swapInstance: {} as Contract,\r\n        totalSwapped: '0',\r\n        allowed: '0' as ReturnType<typeof fromWei>,\r\n        eth_allowed: 0,\r\n        blockNumber: 0,\r\n        networkID: 0,\r\n        text: '',\r\n        wrongNetwork: '',\r\n        API_LINK: '',\r\n        loading_text: '',\r\n        txHash: {} as { transactionHash: string },\r\n        gasFee: 0,\r\n        //proxyFee:0,\r\n        tx_Link: '',\r\n        network_Explorer: '',\r\n        prev_hash: 0,\r\n        swapping: false,\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n      /*  try {\r\n\r\n            let ethereum = window.ethereum;\r\n            let web3 = window.web3;\r\n\r\n\r\n            if (typeof ethereum !== 'undefined') {\r\n                await ethereum.enable();\r\n                web3 = new Web3(ethereum);\r\n                this.setState({web3})\r\n            } else if (typeof web3 !== 'undefined') {\r\n                console.log('Web3 Detected!')\r\n                window.web3 = new Web3(web3.currentProvider);\r\n                this.setState({web3})\r\n            } else {\r\n                console.log('No Web3 Detected')\r\n                window.web3 = new Web3(new Web3.providers.WebsocketProvider('wss://infura.io/ws/v3/72e114745bbf4822b987489c119f858b'));\r\n                this.setState({web3})\r\n            }\r\n            const networkID = await web3.eth.net.getId();\r\n            this.setState({networkID: networkID})\r\n\r\n            if (this.state.networkID === 56) {\r\n                this.load_Hydro_Bsc(this.state.web3)\r\n                //this.getGasPrice()\r\n            } else if (this.state.networkID === 1) {\r\n                this.load_Hydro_Eth(this.state.web3)\r\n            } else {\r\n                this.setState({wrongNetwork: 'This network is not supported yet. Please switch to Ethereum or Binance Smart Chain'})\r\n            }\r\n\r\n\r\n            window.ethereum.on('accountsChanged', function (accounts: string) {\r\n                window.location.reload();\r\n            })\r\n\r\n            window.ethereum.on('chainChanged', function (netId: number) {\r\n                window.location.reload();\r\n            })\r\n\r\n        } catch (error) {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n        }*/\r\n    };\r\n\r\n    getGasPrice() {\r\n\r\n        let address = this.state.account;\r\n        let gasURL = 'https://hydro-bridge-backend.org/api/get_hydro_price/'\r\n        console.log(this.state.account)\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': process.env.REACT_APP_API_KEY as string,\r\n                'Origin': '^'\r\n            },\r\n\r\n            body: JSON.stringify({\r\n                address: address\r\n            })\r\n        };\r\n\r\n        fetch(gasURL, requestOptions)\r\n            .then(async response => {\r\n                if (response.status === 200) {\r\n                    let hydroFee = await response.json();\r\n                    let gasfee = JSON.parse(hydroFee)\r\n                    this.setState({gasFee: gasfee.amount})\r\n\r\n                } else {\r\n                    console.log()\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    api(values: any) {\r\n\r\n        //let address = values.returnValues.depositor\r\n        //let amount = values.returnValues.outputAmount\r\n        let hash = values.transactionHash\r\n\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': process.env.REACT_APP_API_KEY as string,\r\n                'Origin': '^'\r\n            },\r\n\r\n            body: JSON.stringify({\r\n                hash: hash\r\n            })\r\n        };\r\n\r\n        if (this.state.prev_hash === 1) {\r\n            fetch(this.state.API_LINK, requestOptions)\r\n                .then(async response => {\r\n                    if (response.status === 200) {\r\n                        const tx_hash = await response.json();\r\n                        this.setState({txHash: JSON.parse(tx_hash.receipt)}, () => console.log())\r\n                        toast(<a href={this.state.tx_Link + this.state.txHash.transactionHash} target=\"blank\">Swap\r\n                            Success!</a>);\r\n                        this.setState({\r\n                            loading_text: 'Success, Your Hydro is on the way.',\r\n                            swapping: false,\r\n                            prev_hash: 0\r\n                        })\r\n                        console.log(response)\r\n                    } else {\r\n                        console.log('error, please wait a couple minutes,or save your transaction hash & contact hydro admins',)\r\n                        setTimeout(() => this.api(values), 10000);\r\n\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    async load_Hydro_Bsc(web3: Web3) {\r\n\r\n        const currrentNetwork = await this.state.web3.eth.net.getNetworkType();\r\n        const blockNumber = await this.state.web3.eth.getBlockNumber();\r\n        this.setState({\r\n            text: 'BEP-20 to ERC-20',\r\n            API_LINK: 'https://hydro-bridge-backend.org/api/send_eth/',\r\n            tx_Link: 'https://etherscan.io/tx/',\r\n            network_Explorer: 'https://bscscan.com/tx/',\r\n            loading: false\r\n        })\r\n\r\n        const accounts = await this.state.web3.eth.getAccounts();\r\n        const account = accounts[0]\r\n        this.setState({\r\n            account\r\n        })\r\n\r\n        const hydroAddress = \"0xf3DBB49999B25c9D6641a9423C7ad84168D00071\";\r\n        this.setState({\r\n            hydroAddress\r\n        })\r\n\r\n        const hydroInstance = new web3.eth.Contract(BepHydro as AbiItem[], hydroAddress);\r\n        this.setState({\r\n            hydroInstance\r\n        })\r\n\r\n        this.state.hydroInstance.events.allEvents({\r\n            filter: {owner: this.state.account},\r\n            fromBlock: 'latest',\r\n            toBlock: 'latest'\r\n        })\r\n            .on('data', (log: string) => {\r\n                this.displayApprovedFund();\r\n            })\r\n\r\n        const swapContract = \"0x7f00F1B8825064B109Dcc85aAd1f074652D97AAd\";\r\n        const swapInstance = new web3.eth.Contract(BscToEthAbi as AbiItem[], swapContract);\r\n\r\n        this.setState({\r\n            swapAddress: swapContract,\r\n            swapInstance\r\n        })\r\n\r\n        const totalSwapped = await this.state.swapInstance.methods.totalAmountSwapped().call();\r\n        this.setState({totalSwapped: this.state.web3.utils.fromWei(totalSwapped.toString())})\r\n\r\n        this.state.swapInstance.events.allEvents({toBlock: 'latest'})\r\n            .on('data', async (log: string) => {\r\n                const newTotalSwapped = await this.state.swapInstance.methods.totalAmountSwapped().call();\r\n                this.setState({totalSwapped: this.state.web3.utils.fromWei(newTotalSwapped.toString())})\r\n            })\r\n\r\n\r\n        this.displayApprovedFund();\r\n        this.getGasPrice();\r\n\r\n    }\r\n\r\n\r\n    async load_Hydro_Eth(web3: Web3) {\r\n\r\n        const currrentNetwork = await this.state.web3.eth.net.getNetworkType();\r\n        const blockNumber = await this.state.web3.eth.getBlockNumber();\r\n        this.setState({\r\n            text: 'ERC-20 to BEP-20',\r\n            API_LINK: 'https://hydro-bridge-backend.org/api/send_bsc/',\r\n            tx_Link: 'https://bscscan.com/tx/',\r\n            network_Explorer: 'https://etherscan.io/tx/',\r\n            loading: false\r\n        })\r\n\r\n        const accounts = await this.state.web3.eth.getAccounts();\r\n        const account = accounts[0]\r\n        this.setState({\r\n            account\r\n        })\r\n\r\n        const hydroAddress = \"0x946112efaB61C3636CBD52DE2E1392D7A75A6f01\";\r\n        this.setState({\r\n            hydroAddress\r\n        })\r\n\r\n        const hydroInstance = new web3.eth.Contract(HydroAbi as AbiItem[], hydroAddress);\r\n        this.setState({\r\n            hydroInstance\r\n        })\r\n\r\n        this.state.hydroInstance.events.allEvents({filter: {owner: this.state.account}, toBlock: 'latest'})\r\n            .on('data', (log: string) => {\r\n                this.displayApprovedFund();\r\n            })\r\n\r\n        const swapContract = \"0xfa41d158Ea48265443799CF720a120BFE77e41ca\";\r\n        const swapInstance = new web3.eth.Contract(EthToBscAbi as AbiItem[], swapContract);\r\n\r\n        this.setState({\r\n            swapAddress: swapContract,\r\n            swapInstance\r\n        })\r\n\r\n        const totalSwapped = await this.state.swapInstance.methods.totalAmountSwapped().call();\r\n        this.setState({totalSwapped: this.state.web3.utils.fromWei(totalSwapped.toString())})\r\n\r\n        this.state.swapInstance.events.allEvents({toBlock: 'latest'})\r\n            .on('data', async (log: string) => {\r\n                const newTotalSwapped = await this.state.swapInstance.methods.totalAmountSwapped().call();\r\n                this.setState({totalSwapped: this.state.web3.utils.fromWei(newTotalSwapped.toString())})\r\n            })\r\n\r\n\r\n        this.displayApprovedFund();\r\n\r\n    }\r\n\r\n//for erc hydro\r\n    displayApprovedFund = async () => {\r\n        const res = await this.state.hydroInstance.methods.balanceOf(this.state.account).call();\r\n        const hydroBalance = this.state.web3.utils.fromWei(res.toString(), 'ether');\r\n\r\n        const allowed_swap = await this.state.hydroInstance.methods.allowed(this.state.account, this.state.swapAddress).call();\r\n        this.setState({allowed: this.state.web3.utils.fromWei(allowed_swap.toString(), 'ether')});\r\n\r\n        this.setState({hydroBalance})\r\n\r\n    }\r\n\r\n\r\n    approveFunds = async () => {\r\n        this.setState({loading_text: ''})\r\n        await this.state.hydroInstance.methods.approve(this.state.swapAddress, this.state.web3.utils.toWei('1000000000')).send({\r\n            from: this.state.account,\r\n        })\r\n\r\n            .on('transactionHash', (hash: string) => {\r\n                if (hash !== null) {\r\n                    toast(<a href={this.state.network_Explorer + hash} target=\"blank\">View transaction.</a>);\r\n                }\r\n            })\r\n    }\r\n\r\n    swapHydro = async (amount: number) => {\r\n        this.setState({\r\n            loading_text: 'Please do not close the browser until you see the successful message.',\r\n            swapping: true\r\n        })\r\n\r\n        await this.state.swapInstance.methods.swap(this.state.web3.utils.toWei(amount.toString())).send({\r\n            from: this.state.account\r\n        })\r\n\r\n            .on('transactionHash', (hash: string) => {\r\n                if (hash !== null) {\r\n                    toast(<a href={this.state.network_Explorer + hash} target=\"blank\">View transaction.</a>);\r\n                }\r\n            })\r\n\r\n            .on('confirmation', (confirmationNumber: number, receipt: ReceiptType) => {\r\n\r\n                //toast(<a href={this.state.network_Explorer + receipt.events.SwapDeposit.transactionHash} target=\"blank\">View transaction.</a>);\r\n\r\n                if (confirmationNumber === 0) {\r\n                    this.setState({loading_text: 'Swap in progress....Please do not close the browser until you see the successful message.'}, () => console.log())\r\n                    //let hash = values.transactionHash\r\n                    //toast(<a href={this.state.tx_Link + this.state.txHash.transactionHash} target=\"blank\">Swap Success!</a>);\r\n\r\n                }\r\n                if (confirmationNumber === 2) {\r\n\r\n                    this.setState({prev_hash: 1}, () => this.api(receipt.events.SwapDeposit))\r\n                }\r\n\r\n            })\r\n\r\n            .on('error', (error: string, receipt: string) => { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\r\n                this.setState({\r\n                    loading_text: 'Transaction error.',\r\n                    swapping: false\r\n                }, () => console.log())\r\n            });\r\n    }\r\n\r\n\r\n    addBep = async (address: string, amount: string) => {\r\n        console.log(amount)\r\n        let bep_address = '0x662D7C30F16a30214f20257bbDd8b3997Ec0204d';\r\n        await this.state.bepHydroInstance.methods.approve(bep_address, this.state.web3.utils.toWei(amount.toString())).send({\r\n            from: this.state.account\r\n        })\r\n\r\n    }\r\n\r\n\r\n    bscToEthSwap = async (amount: string) => {\r\n        console.log(amount)\r\n        await this.state.BscToEthInstance.methods.swap(this.state.web3.utils.toWei(amount.toString())).send({\r\n            from: this.state.account\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        let content\r\n        if (this.state.loading) {\r\n            if (this.state.networkID === 97 || this.state.networkID === 4) {\r\n                content = <p id=\"loader\" className=\"text-center\">Loading...</p>\r\n            } else\r\n                content = <p id=\"network\" className=\"text-center\">{this.state.wrongNetwork}</p>\r\n        } else {\r\n            content = <Main\r\n                allowed={this.state.allowed}\r\n                eth_allowed={this.state.eth_allowed}\r\n                text={this.state.text}\r\n                allowedHydro={this.state.hydroBalance}\r\n                bepBalance={this.state.bepBalance}\r\n                swapAddress={this.state.swapAddress}\r\n                swapping={this.state.swapping}\r\n                totalSwapped={this.state.totalSwapped}\r\n                networkId={this.state.networkID}\r\n                gasFee={this.state.gasFee}\r\n\r\n                approveFunds={this.approveFunds}\r\n                swapHydro={this.swapHydro}\r\n                bscToEthSwap={this.bscToEthSwap}\r\n                // getCurrentForm={this.getCurrentForm}\r\n                addBep={this.addBep}\r\n                loading_text={this.state.loading_text}/>\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n\r\n                <div className=\"container-fluid mt-5\">\r\n                    <div className=\"row mt-5\">\r\n                        <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\">\r\n                            <div className=\"content mr-auto ml-auto\">\r\n                                {content}\r\n\r\n                                <div id=\"content\" className=\"mt-5 swap-form\">\r\n                                    <div className=\"card mb-4\">\r\n                                        <Menu className={'card-body main-form'}/>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <ToastContainer\r\n                                    position=\"bottom-left\"\r\n                                    autoClose={false}\r\n                                    hideProgressBar={false}\r\n                                    newestOnTop={false}\r\n                                    rtl={false}\r\n                                    // pauseOnVisibilityChange\r\n                                    draggable\r\n                                    pauseOnHover/>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\ndeclare let window: any;\r\ntype ReceiptType = {\r\n    events: { SwapDeposit: boolean }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the redux load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web redux is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different redux. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {bridgeReducer} from \"./bridge-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    bridge: bridgeReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\n\r\n/*let cors = require('cors');\r\napp.use(cors({origin: 'http://localhost:3000'}));*/\r\n\r\n        ReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your redux to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"networkElement\":\"NetworkElement_networkElement__2J89n\",\"item\":\"NetworkElement_item__1HFgS\",\"tempCircle\":\"NetworkElement_tempCircle__1NBTy\",\"select\":\"NetworkElement_select__2U69V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"swapper\":\"Swapper_swapper__1_sbh\",\"swapperDisabled\":\"Swapper_swapperDisabled__1Q4Nf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"networkStatus\":\"Navbar_networkStatus__1g_Lw\",\"accent\":\"Navbar_accent__3PD3A\"};"],"sourceRoot":""}