componentDidMount = async () => {
    try {
      // Get network provider and web3 instance.
      const web3 = await getWeb3();
     this.setState({
        web3
      })
      const networkID = await web3.eth.net.getId();
      this.setState({networkID:networkID})
      console.log('network', networkID)
      const currrentNetwork = await web3.eth.net.getNetworkType();
      console.log(currrentNetwork, 'current network')
      const blockNumber = await web3.eth.getBlockNumber();
      console.log(blockNumber, 'current block')

      this.setState({
        loading: false
      })
      const accounts = await web3.eth.getAccounts();
      const account = accounts[0]

      this.setState({
        account
      })

      //LOAD HYDROTOKEN CONTRACT
      const hydroAddress = "0xa8377d8A0ee92120095bC7ae2d8A8E1973CcEa95";
      this.setState({
        hydroAddress
      })
      const hydroInstance = new web3.eth.Contract(HydroAbi, hydroAddress );
      this.setState({
        hydroInstance
      })

      this.displayApprovedFund();

    //  this.displayApprovedBep();
      
    

      //LOAD BEPHYDRO TOKEN
      const bepHydroAddress = "0x5B387f4886F043f603f7d0cb55DBd727D6649C73";
      this.setState({
        bepHydroAddress
      });

      const bepHydroInstance = new web3.eth.Contract(BepHydro, bepHydroAddress);
      this.setState({
        bepHydroInstance
      })

    const bepBal = await this.state.bepHydroInstance.methods.balanceOf(this.state.account).call();
    const bepBalance = this.state.web3.utils.fromWei(bepBal.toString(), 'ether');

   this.setState({
     bepBalance

   }) 

      console.log(this.state.bepBalance, 'bephydro bal')
      const bep_allowed = await this.state.bepHydroInstance.methods.allowed(this.state.account,'0x662D7C30F16a30214f20257bbDd8b3997Ec0204d').call();
      this.setState({bep_allowed:this.state.web3.utils.fromWei(bep_allowed.toString(), 'ether')});
      console.log('burrrn',this.state.bep_allowed)

      /*this.state.bepHydroInstance.events.allEvents({filter:{owner:this.state.account},fromBlock:'latest', toBlock:'latest'})
        .on('data',(log)=>{
          console.log(log)*/
       // })
		//	if(log.returnValues.owner === this.state.account){
      
     

      //LOAD TOKEN SWAP CONTRACT- Eth TO BSC
      const swapEthToBsc = "0xCDEF517c07eB3DF1F0eD4AFCCaC400215Af88959";
      const ethToBscInstance = new web3.eth.Contract(EthToBscAbi, swapEthToBsc);
      this.setState({
        ethToBscInstance
      })

      console.log(this.state.ethToBscInstance)

      //LOAD TOKEN SWAP CONTRACT- BSC TO ETH
      const swapBscToEth = "0x662D7C30F16a30214f20257bbDd8b3997Ec0204d";
      const BscToEthInstance = new web3.eth.Contract(BscToEthAbi, swapBscToEth);
      this.setState({
        BscToEthInstance
      })

      console.log(this.state.BscToEthInstance);


      console.log(this.state)
      // Get the contract instance.
     

      // Set web3, accounts, and contract to the state, and then proceed with an
      // example of interacting with the contract's methods.
      
    } catch (error) {
      // Catch any errors for any of the above operations.
      alert(
        `Failed to load web3, accounts, or contract. Check console for details.`,
      );
      console.error(error);
    }
  };